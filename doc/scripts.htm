<HTML>
	<!-- Header -->
	<HEAD>
		<TITLE>ReMooD Scripting Documentation</TITLE>
		<STYLE type="text/css">
			<!--
			
			.reserved
			{
				color: #0000ff;
				font-weight: bold;
				font-family: monospace;
			}
			
			.string
			{
				color: #ff2222;
				font-family: monospace;
			}
			
			.char
			{
				color: #dd00dd;
				font-family: monospace;
			}
			
			.number
			{
				color: #ffaa00;
				font-family: monospace;
			}
			
			.comment
			{
				color: #444444;
				font-family: monospace;
				font-style: italic;
			}
			
			.roweven
			{
				background-color: #dddddd;
			}
			
			.rowodd
			{
				background-color: #dddd00;
			}
			
			.codeblockheader
			{
				background-color: #FFFFCC;
				border: 1px;
				border-style: solid;
				border-color: #000000;
			}
			
			.codeblock
			{
				background-color: #CCCCFF;
				border: 1px;
				border-style: solid;
				border-color: #000000;
			}
				
			-->
		</STYLE>
	</HEAD>
	
	<!-- Body -->
	<BODY>
		<!------------------------------------ LOGO ----------------------------------->
		<B><TT>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#ebdbdb">.</FONT><FONT color="#c68c8c">;</FONT><FONT color="#aa5858">o</FONT><FONT color="#892b2b">O</FONT><FONT color="#5b0707">X</FONT><FONT color="#3a0101">N</FONT><FONT color="#250101">W</FONT><FONT color="#1d0101">W</FONT><FONT color="#490d0d">X</FONT><FONT color="#663131">O</FONT><FONT color="#825f5f">d</FONT><FONT color="#a79898">;</FONT><BR>
		&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#ecd5d5">.</FONT><FONT color="#c68282">:</FONT><FONT color="#a83e3e">x</FONT><FONT color="#a40908">0</FONT><FONT color="#b00101">0</FONT><FONT color="#bd0100">0</FONT><FONT color="#b70101">0</FONT><FONT color="#8e0101">K</FONT><FONT color="#6a0100">X</FONT><FONT color="#500100">N</FONT><FONT color="#200001">W</FONT><FONT color="#1d0101">W</FONT><FONT color="#240101">W</FONT><FONT color="#270101">W</FONT><FONT color="#340101">W</FONT><FONT color="#561010">X</FONT><FONT color="#914646">x</FONT><FONT color="#cb8b8b">;</FONT><BR>
		&nbsp;&nbsp;<FONT color="#eed1d1">.</FONT><FONT color="#ba5252">o</FONT><FONT color="#9d0404">K</FONT><FONT color="#ac0101">0</FONT><FONT color="#bb0100">0</FONT><FONT color="#ca0100">0</FONT><FONT color="#d70100">O</FONT><FONT color="#e50101">O</FONT><FONT color="#ef0303">O</FONT><FONT color="#e50708">O</FONT><FONT color="#b80102">0</FONT><FONT color="#860100">X</FONT><FONT color="#600101">X</FONT><FONT color="#310101">W</FONT><FONT color="#2e0101">W</FONT><FONT color="#460101">N</FONT><FONT color="#430001">N</FONT><FONT color="#320001">W</FONT><FONT color="#4d0001">N</FONT><FONT color="#730101">X</FONT><FONT color="#870b0b">K</FONT><FONT color="#b66b6b">l</FONT><BR>
		&nbsp;<FONT color="#d88484">;</FONT><FONT color="#c40f0f">O</FONT><FONT color="#bf0101">0</FONT><FONT color="#c50101">0</FONT><FONT color="#cc0101">0</FONT><FONT color="#da0102">O</FONT><FONT color="#f9c2c1">.</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#e0dedd">.</FONT><FONT color="#dad0ce">.</FONT><FONT color="#b8aaa8">,</FONT><FONT color="#675151">x</FONT><FONT color="#270001">W</FONT><FONT color="#3f0001">N</FONT><FONT color="#4b0101">N</FONT><FONT color="#430001">N</FONT><FONT color="#521112">X</FONT><FONT color="#b59899">;</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#000000">TM</FONT><BR>
		<FONT color="#b28080">c</FONT><FONT color="#7a0101">X</FONT><FONT color="#690100">X</FONT><FONT color="#590101">N</FONT><FONT color="#6b0101">X</FONT><FONT color="#8a0101">K</FONT><FONT color="#820101">X</FONT><FONT color="#e3d4d2">.</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#bdadac">,</FONT><FONT color="#855d5c">d</FONT><FONT color="#935d5c">d</FONT><FONT color="#806060">d</FONT><FONT color="#bfa2a1">,</FONT>&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#894f4e">x</FONT><FONT color="#510101">N</FONT><FONT color="#310101">W</FONT><FONT color="#120001">M</FONT><FONT color="#1f0001">W</FONT><FONT color="#3d0405">N</FONT><FONT color="#c4aaaa">,</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#5d5d5d">xxx</FONT><FONT color="#979797">:</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#979797">:</FONT><FONT color="#5d5d5d">xxx</FONT><FONT color="#dfdfdf">.</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#5d5d5d">xxxxx</FONT><FONT color="#666666">d</FONT><FONT color="#808080">l</FONT><FONT color="#bdbdbd">'</FONT><BR>
		<FONT color="#3e1213">X</FONT><FONT color="#330001">W</FONT><FONT color="#3e0001">N</FONT><FONT color="#420000">N</FONT><FONT color="#460100">N</FONT><FONT color="#460001">N</FONT><FONT color="#2a0001">W</FONT><FONT color="#d9d4d2">.</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#ccaaa8">'</FONT><FONT color="#a85554">d</FONT><FONT color="#975554">d</FONT><FONT color="#b5605f">o</FONT><FONT color="#e09c9a">,</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#efdbd9">.</FONT><FONT color="#a82f2f">k</FONT><FONT color="#7a0100">X</FONT><FONT color="#400101">N</FONT><FONT color="#300404">W</FONT><FONT color="#3f2626">K</FONT><FONT color="#584a4a">k</FONT><FONT color="#867574">l</FONT><FONT color="#bcbcbc">'</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#d5d5d5">.</FONT><FONT color="#000000">MM</FONT><FONT color="#191919">N</FONT><FONT color="#0e0e0e">W</FONT><FONT color="#cccccc">.</FONT>&nbsp;<FONT color="#d4d4d4">.</FONT><FONT color="#0e0e0e">W</FONT><FONT color="#222222">X</FONT><FONT color="#151515">N</FONT><FONT color="#000000">M</FONT><FONT color="#cccccc">.</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#c8c8c8">.</FONT><FONT color="#aeaeae">,</FONT><FONT color="#aaaaaa">,</FONT><FONT color="#c3c3c3">.</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#bcbcbc">'</FONT><FONT color="#aaaaaa">,</FONT><FONT color="#aeaeae">,</FONT><FONT color="#cdcdcd">.</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#d5d5d5">.</FONT><FONT color="#000000">MM</FONT><FONT color="#9f9f9f">;</FONT><FONT color="#bfbfbf">'</FONT><FONT color="#bfbfbf">.</FONT><FONT color="#aaaaaa">,</FONT><FONT color="#676767">d</FONT><FONT color="#040404">M</FONT><FONT color="#606060">x</FONT><BR>
		<FONT color="#270101">W</FONT><FONT color="#290101">W</FONT><FONT color="#2e0101">W</FONT><FONT color="#380001">W</FONT><FONT color="#320101">W</FONT><FONT color="#250101">W</FONT><FONT color="#1e0101">W</FONT><FONT color="#dbd4d2">.</FONT>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#fcbebe">.</FONT><FONT color="#e56465">c</FONT><FONT color="#bf1718">O</FONT><FONT color="#af0100">0</FONT><FONT color="#940101">K</FONT><FONT color="#88201f">0</FONT><FONT color="#cfbdbb">.</FONT>&nbsp;<FONT color="#ac9a9a">;</FONT><FONT color="#867877">l</FONT><FONT color="#515151">k</FONT><FONT color="#050505">M</FONT><FONT color="#646464">d</FONT>&nbsp;<FONT color="#d5d5d5">.</FONT><FONT color="#000000">MM</FONT><FONT color="#838383">l</FONT><FONT color="#000000">M</FONT><FONT color="#3c3c3c">0</FONT>&nbsp;<FONT color="#5d5d5d">x</FONT><FONT color="#000000">M</FONT><FONT color="#9e9e9e">;</FONT><FONT color="#2a2a2a">K</FONT><FONT color="#000000">M</FONT><FONT color="#cccccc">.</FONT>&nbsp;<FONT color="#979797">:</FONT><FONT color="#171717">N</FONT><FONT color="#2e2e2e">K</FONT><FONT color="#7c7c7c">l</FONT><FONT color="#838383">l</FONT><FONT color="#3a3a3a">0</FONT><FONT color="#0e0e0e">W</FONT><FONT color="#747474">o</FONT>&nbsp;&nbsp;<FONT color="#616161">x</FONT><FONT color="#101010">W</FONT><FONT color="#4d4d4d">k</FONT><FONT color="#878787">c</FONT><FONT color="#797979">o</FONT><FONT color="#272727">X</FONT><FONT color="#272727">X</FONT><FONT color="#a7a7a7">;</FONT>&nbsp;<FONT color="#d4d4d4">.</FONT><FONT color="#000000">MM</FONT><FONT color="#d5d5d5">.</FONT>&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#494949">O</FONT><FONT color="#000000">M</FONT><FONT color="#a7a7a7">;</FONT><BR>
		<FONT color="#6d1919">K</FONT><FONT color="#4f0001">N</FONT><FONT color="#2b0101">W</FONT><FONT color="#140001">W</FONT><FONT color="#140101">W</FONT><FONT color="#220101">W</FONT><FONT color="#300001">W</FONT><FONT color="#dfd4d2">.</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#d17f7e">:</FONT><FONT color="#c70e0f">O</FONT><FONT color="#dc4d4d">o</FONT><FONT color="#f2d0cf">.</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#d6adac">'</FONT><FONT color="#5c2020">K</FONT><FONT color="#3d0101">N</FONT><FONT color="#400101">N</FONT><FONT color="#9a7878">l</FONT>&nbsp;<FONT color="#dbd0ce">.</FONT><FONT color="#a67f7e">c</FONT><FONT color="#9d7f7f">c</FONT><FONT color="#7c7c7c">l</FONT><FONT color="#373737">0</FONT><FONT color="#2b2b2b">K</FONT><FONT color="#c3c3c3">.</FONT><FONT color="#d5d5d5">.</FONT><FONT color="#000000">MM</FONT><FONT color="#d1d1d1">.</FONT><FONT color="#4a4a4a">O</FONT><FONT color="#000000">M</FONT><FONT color="#5c5c5c">x</FONT><FONT color="#070707">W</FONT><FONT color="#4a4a4a">O</FONT>&nbsp;<FONT color="#2a2a2a">K</FONT><FONT color="#000000">M</FONT><FONT color="#cccccc">.</FONT><FONT color="#dcdcdc">.</FONT><FONT color="#070707">W</FONT><FONT color="#202020">X</FONT>&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#262626">X</FONT><FONT color="#000000">M</FONT><FONT color="#b5b5b5">'</FONT><FONT color="#878787">c</FONT><FONT color="#000000">M</FONT><FONT color="#4a4a4a">O</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#cacaca">.</FONT><FONT color="#000000">M</FONT><FONT color="#0d0d0d">W</FONT><FONT color="#dfdfdf">.</FONT><FONT color="#d5d5d5">.</FONT><FONT color="#000000">MM</FONT><FONT color="#d5d5d5">.</FONT>&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#404040">0</FONT><FONT color="#000000">M</FONT><FONT color="#aeaeae">,</FONT><BR>
		<FONT color="#a18f8f">:</FONT><FONT color="#180001">W</FONT><FONT color="#140100">W</FONT><FONT color="#1e0001">W</FONT><FONT color="#3e0001">N</FONT><FONT color="#520001">N</FONT><FONT color="#760001">X</FONT><FONT color="#ecd4d2">.</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#b97f7f">c</FONT><FONT color="#7d0000">X</FONT><FONT color="#6d0001">X</FONT><FONT color="#6f1718">K</FONT><FONT color="#c3b1b0">'</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#e0dbda">.</FONT><FONT color="#664645">k</FONT><FONT color="#540101">N</FONT><FONT color="#a03e3e">x</FONT>&nbsp;<FONT color="#f4d9d7">.</FONT><FONT color="#dc5151">l</FONT><FONT color="#bb8b8b">:</FONT><FONT color="#9e9e9e">;</FONT><FONT color="#5d5d5d">x</FONT><FONT color="#939393">:</FONT>&nbsp;<FONT color="#d5d5d5">.</FONT><FONT color="#000000">MM</FONT><FONT color="#d5d5d5">.</FONT><FONT color="#b9b9b9">'</FONT><FONT color="#050505">M</FONT><FONT color="#000000">MM</FONT><FONT color="#b9b9b9">'</FONT>&nbsp;<FONT color="#2a2a2a">K</FONT><FONT color="#000000">M</FONT><FONT color="#cccccc">.</FONT>&nbsp;<FONT color="#555555">k</FONT><FONT color="#040404">M</FONT><FONT color="#6b6b6b">d</FONT><FONT color="#c1c1c1">.</FONT><FONT color="#c9c9c9">.</FONT><FONT color="#787878">o</FONT><FONT color="#050505">M</FONT><FONT color="#323232">K</FONT>&nbsp;<FONT color="#c9c9c9">.</FONT><FONT color="#212121">X</FONT><FONT color="#131313">N</FONT><FONT color="#939393">:</FONT><FONT color="#cdcdcd">.</FONT><FONT color="#bebebe">'</FONT><FONT color="#595959">x</FONT><FONT color="#040404">M</FONT><FONT color="#6b6b6b">d</FONT>&nbsp;<FONT color="#d5d5d5">.</FONT><FONT color="#000000">MM</FONT><FONT color="#878787">c</FONT><FONT color="#a2a2a2">;</FONT><FONT color="#a2a2a2">;</FONT><FONT color="#949494">:</FONT><FONT color="#4d4d4d">k</FONT><FONT color="#040404">M</FONT><FONT color="#7c7c7c">l</FONT><BR>
		&nbsp;<FONT color="#b59999">;</FONT><FONT color="#351919">X</FONT><FONT color="#430000">N</FONT><FONT color="#790000">X</FONT><FONT color="#860001">X</FONT><FONT color="#8a0001">K</FONT><FONT color="#a77c7b">c</FONT><FONT color="#ae9494">:</FONT><FONT color="#a79494">:</FONT><FONT color="#ac9494">:</FONT><FONT color="#754a4a">x</FONT><FONT color="#3c0001">N</FONT><FONT color="#350001">W</FONT><FONT color="#1d0001">W</FONT><FONT color="#360808">N</FONT><FONT color="#a57171">l</FONT><FONT color="#ca9494">;</FONT><FONT color="#d39494">;</FONT><FONT color="#e09493">,</FONT><FONT color="#e5908f">,</FONT><FONT color="#cb2e2e">x</FONT><FONT color="#db0203">O</FONT><FONT color="#f82628">d</FONT><FONT color="#f88f90">,</FONT><FONT color="#bcb5b4">'</FONT><FONT color="#6a6a6a">d</FONT><FONT color="#757575">o</FONT><FONT color="#9d9d9d">;</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#808080">ll</FONT>&nbsp;&nbsp;<FONT color="#a2a2a2">;</FONT><FONT color="#808080">l</FONT><FONT color="#9c9c9c">:</FONT>&nbsp;&nbsp;<FONT color="#959595">:</FONT><FONT color="#808080">l</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#bcbcbc">'</FONT><FONT color="#888888">c</FONT><FONT color="#6e6e6e">d</FONT><FONT color="#6a6a6a">d</FONT><FONT color="#838383">l</FONT><FONT color="#b3b3b3">,</FONT>&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#aeaeae">,</FONT><FONT color="#7c7c7c">l</FONT><FONT color="#6a6a6a">d</FONT><FONT color="#6e6e6e">o</FONT><FONT color="#8e8e8e">c</FONT><FONT color="#cdcdcd">.</FONT>&nbsp;&nbsp;&nbsp;<FONT color="#808080">lll</FONT><FONT color="#808080">ll</FONT><FONT color="#888888">c</FONT><FONT color="#a3a3a3">;</FONT><FONT color="#d8d8d8">.</FONT><BR>
		&nbsp;&nbsp;<FONT color="#e7dfdf">.</FONT><FONT color="#a86767">l</FONT><FONT color="#6a0e0f">K</FONT><FONT color="#320001">W</FONT><FONT color="#320001">W</FONT><FONT color="#590101">N</FONT><FONT color="#4c0001">N</FONT><FONT color="#200101">W</FONT><FONT color="#1b0001">W</FONT><FONT color="#150000">W</FONT><FONT color="#210101">W</FONT><FONT color="#330101">W</FONT><FONT color="#4b0001">N</FONT><FONT color="#650001">X</FONT><FONT color="#880001">K</FONT><FONT color="#a30001">K</FONT><FONT color="#c50000">0</FONT><FONT color="#df0001">O</FONT><FONT color="#ee0002">O</FONT><FONT color="#f10101">O</FONT><FONT color="#f21f20">x</FONT><FONT color="#f08181">;</FONT><BR>
		&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#ae9999">;</FONT><FONT color="#a25555">d</FONT><FONT color="#7e1818">0</FONT><FONT color="#2b0101">W</FONT><FONT color="#170101">W</FONT><FONT color="#0b0000">M</FONT><FONT color="#120001">M</FONT><FONT color="#180100">W</FONT><FONT color="#1f0101">W</FONT><FONT color="#500000">N</FONT><FONT color="#770000">X</FONT><FONT color="#990001">K</FONT><FONT color="#b50100">0</FONT><FONT color="#ca0101">0</FONT><FONT color="#d92423">x</FONT><FONT color="#e65d5d">c</FONT><FONT color="#eda3a3">'</FONT><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<FONT color="#bca3a3">,</FONT><FONT color="#7c6666">d</FONT><FONT color="#493232">0</FONT><FONT color="#320708">N</FONT><FONT color="#3c0101">N</FONT><FONT color="#480101">N</FONT><FONT color="#610101">X</FONT><FONT color="#760e0f">K</FONT><FONT color="#ac3939">x</FONT><FONT color="#cc6f6f">c</FONT><FONT color="#e0b1b1">'</FONT><BR>
		<BR>
		This documentation was written by GhostlyDeath (<A HREF="mailto:ghostlydeath@gmail.com">ghostlydeath@gmail.com</A>).<BR>
		ReMooD (C) 2006-2009 GhostlyDeath, 2006-2009 ReMooD Team. The ReMooD Name and Logo are trademarks of GhostlyDeath (<A HREF="mailto:ghostlydeath@gmail.com">ghostlydeath@gmail.com</A>).</TT></B>
		<!----------------------------------------------------------------------------->
	
		<!-- ###################
		      TABLE OF CONTENTS
		     ################### -->
		<H1>Table of Contents</H1>
		<P>
			<UL>
				<LI><A href="#legacyscript">Legacy Script</A>
					<UL>
						<LI><A href="#legacyscript_about">About</A></LI>
						<LI><A href="#legacyscript_remood">Legacy Script In ReMooD</A>
							<UL>
								<LI><A href="#legacyscript_remood_compatibility">Compatibility</A></LI>
							</UL></LI>
						<LI><A href="#legacyscript_utilizing">Utilizing Legacy Scripts</A></LI>
						<LI><A href="#legacyscript_types">Types</A>
							<UL>
								<LI><A href="#legacyscript_types_int">int</A></LI>
								<LI><A href="#legacyscript_types_fixed">fixed</A></LI>
								<LI><A href="#legacyscript_types_string">string</A></LI>
								<LI><A href="#legacyscript_types_mobj">mobj</A></LI>
								<LI><A href="#legacyscript_types_function">function</A></LI>
							</UL></LI>
						<LI><A href="#legacyscript_expressions">Expressions</A>
							<UL>
								<LI><A href="#legacyscript_expressions_oporder">Operators and Their Orders</A></LI>
								<LI><A href="#legacyscript_expressions_optricks">Operator Tricks</A>
									<UL>
										<LI><A href="#legacyscript_expressions_optricks_xor">XOR (Exclusive OR)</A></LI>
									</UL></LI>
							</UL></LI>
						<LI><A href="#legacyscript_funcs">Functions</A>
							<UL>
								<LI><A href="#legacyscript_func_print">print</A></LI>
								<LI><A href="#legacyscript_func_runcommand">runcommand</A></LI>
							</UL></LI>
					</UL></LI>
				<LI><A href="#assembly">ReMooD Assembly</A>
					<UL>
						<LI><A href="#assembly_about">About</A></LI>
						<LI><A href="#assembly_memory">Memory Access</A></LI>
						<LI><A href="#assembly_instructions">Instructions</A>
							<UL>
								<LI><A href="#assembly_instructions_null">NULL</A></LI>
								<LI><A href="#assembly_instructions_trap">TRAP</A></LI>
								<LI><A href="#assembly_instructions_call">CALL</A></LI>
								<LI><A href="#assembly_instructions_jump">JUMP</A></LI>
								<LI><A href="#assembly_instructions_return">RETURN</A></LI>
								<LI><A href="#assembly_instructions_pause">PAUSE</A></LI>
								<LI><A href="#assembly_instructions_wait">WAIT</A></LI>
								<LI><A href="#assembly_instructions_setreturnvalue">SETRETURNVALUE</A></LI>
								<LI><A href="#assembly_instructions_getreturnvalue">GETRETURNVALUE</A></LI>
								<LI><A href="#assembly_instructions_copy">COPY</A></LI>
								<LI><A href="#assembly_instructions_swap">SWAP</A></LI>
								<LI><A href="#assembly_instructions_setvalue">SETVALUE</A></LI>
								<LI><A href="#assembly_instructions_getvalue">GETVALUE</A></LI>
								<LI><A href="#assembly_instructions_add">ADD</A></LI>
								<LI><A href="#assembly_instructions_subtract">SUBTRACT</A></LI>
								<LI><A href="#assembly_instructions_multiply">MULTIPLY</A></LI>
								<LI><A href="#assembly_instructions_divide">DIVIDE</A></LI>
								<LI><A href="#assembly_instructions_modulus">MODULUS</A></LI>
								<LI><A href="#assembly_instructions_binaryand">BINARYAND</A></LI>
								<LI><A href="#assembly_instructions_binaryor">BINARYOR</A></LI>
								<LI><A href="#assembly_instructions_binaryxor">BINARYXOR</A></LI>
								<LI><A href="#assembly_instructions_binarynot">BINARYNOT</A></LI>
								<LI><A href="#assembly_instructions_binaryxnor">BINARYXNOR</A></LI>
								<LI><A href="#assembly_instructions_binaryshiftleft">BINARYSHIFTLEFT</A></LI>
								<LI><A href="#assembly_instructions_binaryshiftright">BINARYSHIFTRIGHT</A></LI>
							</UL></LI>
					</UL></LI>
				<LI><A href="#comparison">Comparison of Scripting Languages</A>
			</UL>
		</P>
		
		<!-- ###################
		         LEGACY SCRIPT
		     ################### -->
		<DIV id="legacyscript">
		<H1>Legacy Script</H1>
		<P>
			<!-- About -->
			<DIV id="legacyscript_about">
			<H2>About</H2>
			<P>
				<B><I><U>NOTE: Some of this documentation refers to a future version of ReMooD which will be version 0.8a.</U></I></B><BR>
				Legacy Script is a scripting language for Doom that allows users to define custom actions when
				players cross lines.
				It is available for ReMooD, Legacy, Old Versions of Eternity and SMMU.
				FraggleScript was renamed to Legacy Script because this scripting language emphasizes Legacy more than Eternity since it was removed and also since SMMU is out of date and not much maps were made for it.
				There are also modifications to the language which are unique to ReMooD.
			</P>
			</DIV>
			
			<!-- Legacy Script in ReMooD -->
			<DIV id="legacyscript_remood">
			<H2>Legacy Script In ReMooD</H2>
			<P>
				ReMooD supports Legacy Legacy Script completely. However there are some differences of
				the script in this port than in the parent port Legacy.
				One of those differences that instead of being interpreted on the go, the scripts are
				all compiled into byte code and executed within the ReMooD Virtual Machine.
				Existing scripts should still be compatible completely except for a few things.
				
				<DIV id="legacyscript_remood_compatibility">
				<H3>Compatibility</H3>
				<P>
					There have been changes in Legacy Script that may affect scripts.
				
					<UL>
						<LI>The function <A href="#legacyscript_func_runcommand" class="func">runcommand()</A>
						no longer has the ability to execute any console command. However, an emulation
						layer is provided for the following commands, anything that isn't on this list will
						do nothing. Any emulation is virtualized as in they don't really call the real
						console commands.
					
						<UL>
							<LI><CODE>echo</CODE> - Prints a line a text.</LI>
							<LI><CODE>color</CODE> - Changes the color of the first local player.</LI>
							<LI><CODE>color2</CODE> - Changes the color of the second local player.</LI>
							<LI><CODE>originalweaponswitch</CODE> - Changes the weapon preference to classic (ex: EXE).</LI>
							<LI><CODE>viewheight</CODE> - Changes the viewheight of the player.</LI>
							<LI><CODE>turbo</CODE> - Percent change in speed (200 = 200% speed).</LI>
							<LI><CODE>respawnitem</CODE> - Sets whether items respawn or not.</LI>
							<LI><CODE>respawnitemtime</CODE> - Sets the amount of time before items respawn.</LI>
							<LI><CODE>respawnmonsters</CODE> - Sets whether monsters respawn or not.</LI>
							<LI><CODE>respawnmonsterstime</CODE> - Sets the amount of time before items respawn.</LI>
							<LI><CODE>fastmonsters</CODE> - Sets the speed of monsters.</LI>
							<LI><CODE>predictingmonsters</CODE> - Sets whether monsters will aim ahead of their targets or not.</LI>
							<LI><CODE>exitlevel</CODE> - Leaves the current level then goes to the next level.</LI>
							<LI><CODE>restartlevel</CODE> - Restarts the current level.</LI>
							<LI><CODE>chasecam</CODE> - Sets whether the chasecam is on or off.</LI>
							<LI><CODE>cam_height</CODE> - Sets the height of the camera.</LI>
							<LI><CODE>cam_dist</CODE> - Sets the distance of the camera.</LI>
							<LI><CODE>cam_speed</CODE> - Sets the speed of the camera.</LI>
							<LI><CODE>skin</CODE> - Changes the skin of the first local player.</LI>
							<LI><CODE>skin2</CODE> - Changes the skin of the second local player.</LI>
							<LI><CODE>teamplay</CODE> - Sets whether teamplay is enabled by color or skin.</LI>
							<LI><CODE>teamdamage</CODE> - Sets whether players on the same team can hurt each other.</LI>
							<LI><CODE>gravity</CODE> - Sets the amount of gravity in a level.</LI>
							<LI><CODE>allowjump</CODE> - Sets whether players can jump or not.</LI>
							<LI><CODE>allowrocketjump</CODE> - Sets whether players will gain extra vertical boost from explosions or not.</LI>
							<LI><CODE>allowautoaim</CODE> - Sets whether players can autoaim at targets or not.</LI>
							<LI><CODE>allowturbo</CODE> - Sets whether players can use turbo or not.</LI>
							<LI><CODE>allowexitlevel</CODE> - Sets whether players can exit the level via exit triggers.</LI>
							<LI><CODE>allowmlook</CODE> - Sets whether players can look up/down or not.</LI>
							<LI><CODE>fragsweaponfalling</CODE> - Sets whether players will drop weapons when they die or not.</LI>
							<LI><CODE>fraglimit</CODE> - Sets the amount of frags until the game is won.</LI>
							<LI><CODE>timelimit</CODE> - Sets the amount of time before the game ends.</LI>
							<LI><CODE>say</CODE> - Says a line (Will be prefixed by "&lt;SCRIPT&gt;").</LI>
							<LI><CODE>sayto</CODE> - Says a line to a certain player (Will be prefixed by "&lt;SCRIPT&gt;").</LI>
							<LI><CODE>sayteam</CODE> - Says a line to your team (Will be prefixed by "&lt;SCRIPT&gt;").</LI>
							<LI><CODE>map</CODE> - Changes the current map.</LI>
							<LI><CODE>solidcorpse</CODE> - Sets whether corpses are solid or not.</LI>
							<LI><CODE>bloodtime</CODE> - Sets the amount of time blood will last.</LI>
							<LI><CODE>deathmatch</CODE> - Sets the current game mode (0 = Cooperative, 1 = DM, 2 = Alt DM and 3 = New DM)</LI>
						</UL></LI>
						
						<LI>The function <A href="#legacyscript_func_runcommand" class="func">runcommand()</A> also has these
						emulated for <I>ReMooD 0.7a</I> and <I>ReMooD 0.7b</I> support.
						
						<UL>
							<LI><CODE>cl1_skin</CODE> - Alias for <CODE>skin</CODE>.</LI>
							<LI><CODE>cl2_skin</CODE> - Alias for <CODE>skin2</CODE>.</LI>
							<LI><CODE>cl3_skin</CODE> - Changes the skin of the third local player.</LI>
							<LI><CODE>cl4_skin</CODE> - Changes the skin of the fourth local player.</LI>
							<LI><CODE>cl1_color</CODE> - Alias for <CODE>color</CODE>.</LI>
							<LI><CODE>cl2_color</CODE> - Alias for <CODE>color2</CODE>.</LI>
							<LI><CODE>cl3_color</CODE> - Changes the color of the third local player.</LI>
							<LI><CODE>cl4_color</CODE> - Changes the color of the fourth local player.</LI>
							<LI><CODE>classicmeleerange</CODE> - Sets whether monsters will be able to use a melee attack at any vertical distance or not.</LI>
							<LI><CODE>classicblood</CODE> - Sets whether blood will act like it does in Vanilla Doom or not.</LI>
							<LI><CODE>classicmonsterlogic</CODE> - Sets whether monsters will act like they do in Vanilla Doom or not.</LI>
							<LI><CODE>spawnmonsters</CODE> - Sets whether monsters will spawn or not.</LI>
						</UL></LI>
						
						<LI>The functions <CODE>break()</CODE>, <CODE>continue()</CODE>, <CODE>return()</CODE> and <CODE>goto()</CODE> are no longer real functions, they are
						special functions used by the compiler.</LI>
						
						<LI>There is a new type <CODE><A CLASS="reserved">function</A></CODE> which points to a function (example: If <CODE>print()</CODE> was not constant, it could be reassigned to something else). It is not recommended to attempt to reassign built-in functions or to call symbols that are not functions. It can also contain new code.</LI>
						
						<LI>ReMooD supports parenthetical statements however Doom Legacy may have supported them but were undocumented.</LI>
					</UL>
				</P>
				</DIV>
			</P>
			</DIV>
			
			<!-- Legacy Script in ReMooD -->
			<DIV id="legacyscript_utilizing">
			<H2>Utilizing Legacy Scripts</H2>
			<P>
				Before using Legacy Scripts in your code, you first need to write it then insert it into a level.
				Once writing is completed, any written scripts are stored in the map header (ex: MAP01, E2M1, etc..
				Scripts are placed after <TT>[scripts]</TT> blocks, anything outside will not be considered a script.
			</P>
			</DIV>
			
			<!-- Legacy Script Types -->
			<DIV id="legacyscript_types">
			<H2>Types</H2>
			<P>
				<!-- int -->
				<DIV id="legacyscript_types_int">
				<H3><CODE><A CLASS="reserved">int</A></CODE>, <CODE><A CLASS="reserved">hub</A></CODE> and <CODE><A CLASS="reserved">const</A></CODE></H3>
				<P>
					A standard integer ranging from -2,147,483,648 to 2,147,483,647. If a <CODE><A CLASS="reserved">const</A></CODE> is declared, the value cannot be changed and must be initialized. if a <CODE><A CLASS="reserved">hub</A></CODE> is declared, the value will be available across levels.
					
					<UL>
						<LI>Conversion:
							<UL>
								<LI>To <CODE><A CLASS="reserved">fixed</A></CODE> - If the value is less than -32,768 then this will be the new value, if the value is greater than 32,767 then this will be the new value. Otherwise, the value will remain the same.</LI>
								<LI>To <CODE><A CLASS="reserved">string</A></CODE> - The value will be converted to a string format.</LI>
								<LI>To <CODE><A CLASS="reserved">mobj</A></CODE> - A search will be done for all map objects for a matching id number (ex: 4002 is a Zombieman) and the first match will be returned.</LI>
								<LI>To <CODE><A CLASS="reserved">function</A></CODE> (ReMooD Only) - A reference lookup will be done, if such a reference is found then it will be mapped to the function. Otherwise, the function will be a NULL function which when executed will stop the script.</LI>
							</UL></LI>
					</UL>
					
					<TABLE width="75%" border="0" cellpadding="1" cellspacing="1">
					<TR><TD colspan="2">Sample Code:</TD></TR>
					<TR><TD width="10%"></TD></TD>
					<TD class="codeblock">
						<CODE>
							<A CLASS="reserved">int</A> foo = 100;<BR>
						</CODE>
					</TD></TR>
					</TABLE>
				</P>
				</DIV>
				
				<!-- fixed -->
				<DIV id="legacyscript_types_fixed">
				<H3><CODE><A CLASS="reserved">fixed</A></CODE></H3>
				<P>
					A standard fixed point number ranging from -32,768.65535 to 32,767.65535.
					
					<UL>
						<LI>Conversion:
							<UL>
								<LI>To <CODE><A CLASS="reserved">int</A></CODE> - Anything after the decimal point will be truncated, 5.1 becomes 5, 7.9 becomes 7.</LI>
								<LI>To <CODE><A CLASS="reserved">string</A></CODE> - The value will be converted to a string format.</LI>
								<LI>To <CODE><A CLASS="reserved">mobj</A></CODE> - After conversion to an <CODE><A CLASS="reserved">int</A></CODE>, a search will be done for all map objects for a matching id number (ex: 4002 is a Zombieman) and the first match will be returned.</LI>
								<LI>To <CODE><A CLASS="reserved">function</A></CODE> (ReMooD Only) - After conversion to an <CODE><A CLASS="reserved">int</A></CODE>, a reference lookup will be done, if such a reference is found then it will be mapped to the function. Otherwise, the function will be a NULL function which when executed will stop the script.</LI>
							</UL></LI>
					</UL>
					
					<TABLE width="75%" border="0" cellpadding="1" cellspacing="1">
					<TR><TD colspan="2">Sample Code:</TD></TR>
					<TR><TD width="10%"></TD></TD>
					<TD class="codeblock">
						<CODE>
							<A CLASS="reserved">fixed</A> foo = 10.5;<BR>
						</CODE>
					</TD></TR>
					</TABLE>
				</P>
				</DIV>
				
				<!-- string -->
				<DIV id="legacyscript_types_string">
				<H3><CODE><A CLASS="reserved">string</A></CODE></H3>
				<P>
					A string of characters terminated by a NULL character.
					
					<UL>
						<LI>Conversion:
							<UL>
								<LI>To <CODE><A CLASS="reserved">int</A></CODE> - The string value will be transformed to an <CODE><A CLASS="reserved">int</A></CODE>, if conversion fails the result will be 0.</LI>
								<LI>To <CODE><A CLASS="reserved">fixed</A></CODE> - The string value will be transformed to a <CODE><A CLASS="reserved">fixed</A></CODE>, if conversion fails the result will be 0.</LI>
								<LI>To <CODE><A CLASS="reserved">mobj</A></CODE> - The string value will be transformed to an <CODE><A CLASS="reserved">int</A></CODE>, if conversion fails the result will be 0. Once conversion is done, the rules for <CODE><A CLASS="reserved">int</A></CODE> to <CODE><A CLASS="reserved">mobj</A></CODE> will be done.</LI>
								<LI>To <CODE><A CLASS="reserved">function</A></CODE> - A symbolic name lookup will be done, if the symbol name matches a <CODE><A CLASS="reserved">function</A></CODE> then it will reference that.</LI>
							</UL></LI>
					</UL>
					
					<TABLE width="75%" border="0" cellpadding="1" cellspacing="1">
					<TR><TD colspan="2">Sample Code:</TD></TR>
					<TR><TD width="10%"></TD></TD>
					<TD class="codeblock">
						<CODE>
							<A CLASS="reserved">string</A> foo = <A CLASS="string">"Hello World"</A>;<BR>
						</CODE>
					</TD></TR>
					</TABLE>
				</P>
				</DIV>
				
				<!-- mobj -->
				<DIV id="legacyscript_types_mobj">
				<H3><CODE><A CLASS="reserved">mobj</A></CODE></H3>
				<P>
					A reference to an object on the map.
					
					<UL>
						<LI>Conversion:
							<UL>
								<LI>To <CODE><A CLASS="reserved">int</A></CODE> - The reference will be lost and the <CODE><A CLASS="reserved">int</A></CODE> will equal -1.</LI>
								<LI>To <CODE><A CLASS="reserved">fixed</A></CODE> - The reference will be lost and the <CODE><A CLASS="reserved">fixed</A></CODE> will equal -1.</LI>
								<LI>To <CODE><A CLASS="reserved">string</A></CODE> - The <CODE><A CLASS="reserved">string</A></CODE> will become "map object".</LI>
								<LI>To <CODE><A CLASS="reserved">function</A></CODE> (ReMooD Only) - The <CODE><A CLASS="reserved">function</A></CODE> will transform into a NULL function, if called the script will stop.</LI>
							</UL></LI>
					</UL>
					
					<TABLE width="75%" border="0" cellpadding="1" cellspacing="1">
					<TR><TD colspan="2">Sample Code:</TD></TR>
					<TR><TD width="10%"></TD></TD>
					<TD class="codeblock">
						<CODE>
							<A CLASS="reserved">mobj</A> foo = playerobj(0);<BR>
						</CODE>
					</TD></TR>
					</TABLE>
				</P>
				</DIV>
				
				<!-- function -->
				<DIV id="legacyscript_types_function">
				<H3><CODE><A CLASS="reserved">function</A></CODE></H3>
				<P>
					A function that executes a set of code. This type is unique to ReMooD and will break compatibility if used in other source ports.
					
					<UL>
						<LI>Conversion:
							<UL>
								<LI>To <CODE><A CLASS="reserved">int</A></CODE> (ReMooD Only) - The <CODE><A CLASS="reserved">function</A></CODE>'s reference to the virtual machine will be returned (built-in functions will result in negative values.</LI>
								<LI>To <CODE><A CLASS="reserved">fixed</A></CODE> (ReMooD Only) - The <CODE><A CLASS="reserved">function</A></CODE>'s reference to the virtual machine will be returned (built-in functions will result in negative values.</LI>
								<LI>To <CODE><A CLASS="reserved">mobj</A></CODE> (ReMooD Only) - <CODE><A CLASS="reserved">function</A></CODE> to <CODE><A CLASS="reserved">int</A></CODE> to <CODE><A CLASS="reserved">mobj</A></CODE> rules will be used.</LI>
								<LI>To <CODE><A CLASS="reserved">string</A></CODE> (ReMooD Only) - The <CODE><A CLASS="reserved">function</A></CODE>'s symbolic name will be converted to a string.</LI>
							</UL></LI>
					</UL>
					
					<TABLE width="75%" border="0" cellpadding="1" cellspacing="1">
					<TR><TD colspan="2">Sample Code:</TD></TR>
					<TR><TD width="10%"></TD></TD>
					<TD class="codeblock">
						<CODE>
							<A CLASS="reserved">function</A> foo(mobj theobject)<BR>
							{<BR>
							&nbsp;&nbsp;&nbsp;&nbsp;damageobj(theobject, 5000);<BR>
							&nbsp;&nbsp;&nbsp;&nbsp;objmomz(theobject, 2000.0);<BR>
							}<BR>
						</CODE>
					</TD></TR>
					</TABLE>
				</P>
				</DIV>
				
				
			</P>
			</DIV>
			
			<!-- Legacy Script Types -->
			<DIV id="legacyscript_expressions">
			<H2>Expressions</H2>
			<P>
				Everything from adding and multiplying numbers to calling functions is considered and expression. Please not that Legacy Script does not follow natural mathematical order of operations nor any standard programming languages. Legacy Script uses a semi-reversed order, so <CODE>2 + 3 - 4</CODE> is equivalent to <CODE>2 + (3 - 4)</CODE> which will result in <CODE>1</CODE>.
				
				<!-- Order of Operations -->
				<DIV id="legacyscript_expressions_oporder">
				<H3>Operators and Their Orders</H3>
				<P>
					All expressions will follow this order.
					
					<TABLE width="100%" cellpadding="1" cellspacing="1" border="1">
						<!-- TOP ROW -->
						<TR>
							<TD width="25%"><CENTER><B>Operators</B></CENTER></TD>
							<TD width="75%"><CENTER><B>Description</B></CENTER></TD>
						</TR>
						
						<!-- Parenthesis -->
						<TR>
							<TD><CODE>(</CODE> and <CODE>)</CODE></TD>
							<TD><B>Parenthesis:</B> Anything placed within parenthesis will be evaluated first. For example: <CODE>2 + 3 * 4</CODE> is really <CODE>2 + (3 * 4)</CODE> which results in <CODE>14</CODE>. However, the order can be changed using parenthesis such as <CODE>(2 + 3) * 4</CODE> which will result in </CODE>20</CODE>.</TD>
						</TR>
						
						<!-- . -->
						<TR>
							<TD><CODE>.</CODE></TD>
							<TD><B>Member:</B> This operator "gives Legacy Script a comfortable object-oriented appearance" (fsbasic.html). However all it does is move the first parameter of a function outside of the parenthesis. The second operator must be a function that takes at least one parameter. You can only use identifiers as the first parameter because the compiler will treat <CODE>0.print()</CODE> as a decimal number. Example: a <CODE><A CLASS="reserved">mobj</A> obelisk</CODE> can be killed by using <CODE>obelisk.kill()</CODE> which is the same as <CODE>kill(obelisk)</CODE>.</TD>
						</TR>
						
						<!-- -- -->
						<TR>
							<TD><CODE>--</CODE></TD>
							<TD><B>Decrement:</B> Decreases a value by one. If the operator is prefixed (<CODE>--i</CODE>) then the value is decreased by one then the resulting value is used. If the operator is suffixed (<CODE>i--</CODE>) then the value is returned then it is decremented. If a non-<A CLASS="reserved">int</A> type is used, it will be converted to one then converted back to the original type.</TD>
						</TR>
						
						<!-- ++ -->
						<TR>
							<TD><CODE>++</CODE></TD>
							<TD><B>Increment:</B> Increases a value by one. If the operator is prefixed (<CODE>++i</CODE>) then the value is increased by one then the resulting value is used. If the operator is suffixed (<CODE>i++</CODE>) then the value is returned then it is incremented. If a non-<A CLASS="reserved">int</A> type is used, it will be converted to one then converted back to the original type.</TD>
						</TR>
						
						<!-- ! -->
						<TR>
							<TD><CODE>!</CODE></TD>
							<TD><B>Logical NOT:</B> This will turn a non-zero value into zero, and a zero value to 1. If a non-<A CLASS="reserved">int</A> type is used, it will be converted to one then converted back to the original type.</TD>
						</TR>
						
						<!-- ~ -->
						<TR>
							<TD><CODE>~</CODE></TD>
							<TD><B>Binary NOT:</B> Flips every bit, ON bits become OFF and OFF bits become ON. If a non-<A CLASS="reserved">int</A> type is used, it will be converted to one then converted back to the original type.</TD>
						</TR>
						
						<!-- % -->
						<TR>
							<TD><CODE>%</CODE></TD>
							<TD><B>Modulus:</B> Returns the remainder of one number divided by the other. The second operand must not be zero. Example: <CODE>5 % 2</CODE> will result in <CODE>1</CODE></TD>
						</TR>
						
						<!-- / -->
						<TR>
							<TD><CODE>/</CODE></TD>
							<TD><B>Division:</B> Returns the fractional value of the first number over the second number. The second operand must not be zero. Example: <CODE>4 / 2</CODE> will result in <CODE>2</CODE></TD>
						</TR>
						
						<!-- * -->
						<TR>
							<TD><CODE>*</CODE></TD>
							<TD><B>Multiplication:</B> Returns the product of the first number times the second number. Example: <CODE>5 * 4</CODE> is equivalent to <CODE>5 + 5 + 5 + 5</CODE> which results in <CODE>20</CODE></TD>
						</TR>
						
						<!-- - -->
						<TR>
							<TD><CODE>-</CODE></TD>
							<TD>
								<B>Subtraction:</B> Returns the difference of the first operand and the second operand. Example: <CODE>4 - 2</CODE> will result in <CODE>2</CODE>.<BR>
								<B>Unary Plus:</B> If the first operand is an operator then, the value of the second operand will have it's sign flipped.</B>
							</TD>
						</TR>
						
						<!-- + -->
						<TR>
							<TD><CODE>+</CODE></TD>
							<TD><B>Addition:</B> Returns the sum of the first operand and the second operand. Example: <CODE>2 + 2</CODE> will result in <CODE>4</CODE>.</TD>
						</TR>
						
						<!-- >= -->
						<TR>
							<TD><CODE>&gt;=</CODE></TD>
							<TD><B>Greater Than or Equal To:</B> Compares both operands, if the first operand is greater than the second operand or equal to it, then <CODE>1</CODE> is returned otherwise <CODE>0</CODE> is. Example: <CODE>3 &gt;= 2</CODE> will result in <CODE>1</CODE>; <CODE>2 &gt;= 2</CODE> will result in <CODE>1</CODE>; and <CODE>1 &gt;= 2</CODE> will result in <CODE>0</CODE>.</TD>
						</TR>
						
						<!-- <= -->
						<TR>
							<TD><CODE>&lt;=</CODE></TD>
							<TD><B>Less Than or Equal To:</B> Compares both operands, if the first operand is less than the second operand or equal to it, then <CODE>1</CODE> is returned otherwise <CODE>0</CODE> is. Example: <CODE>3 &lt;= 2</CODE> will result in <CODE>0</CODE>; <CODE>2 &lt;= 2</CODE> will result in <CODE>1</CODE>; and <CODE>1 &lt;= 2</CODE> will result in <CODE>1</CODE>.</TD>
						</TR>
						
						<!-- > -->
						<TR>
							<TD><CODE>&gt;</CODE></TD>
							<TD><B>Greater Than:</B> Compares both operands, if the first operand is greater than the second operand, then <CODE>1</CODE> is returned, otherwise <CODE>0</CODE> is. Example: <CODE>3 &gt; 2</CODE> will result in <CODE>1</CODE>; <CODE>2 &gt; 2</CODE> will result in <CODE>0</CODE>; and <CODE>1 &gt; 2</CODE> will result in <CODE>0</CODE>.</TD>
						</TR>
						
						<!-- < -->
						<TR>
							<TD><CODE>&lt;</CODE></TD>
							<TD><B>Less Than:</B> Compares both operands, if the first operand is less than the second operand, then <CODE>1</CODE> is returned, otherwise <CODE>0</CODE> is. Example: <CODE>3 &lt; 2</CODE> will result in <CODE>0</CODE>; <CODE>2 &lt; 2</CODE> will result in <CODE>0</CODE>; and <CODE>1 &lt; 2</CODE> will result in <CODE>1</CODE>.</TD>
						</TR>
						
						<!-- != -->
						<TR>
							<TD><CODE>!=</CODE></TD>
							<TD><B>Not Equal To:</B> Compares both operands, if their value is not the same then <CODE>1</CODE> is returned, otherwise <CODE>0</CODE> is. Example: <CODE>3 != 3</CODE> will result in <CODE>0</CODE>; and <CODE>3 != 2</CODE> will result in <CODE>1</CODE>.</TD>
						</TR>
						
						<!-- == -->
						<TR>
							<TD><CODE>==</CODE></TD>
							<TD><B>Equal To:</B> Compares both operands, if their value is the same then <CODE>1</CODE> is returned, otherwise <CODE>0</CODE> is. Example: <CODE>3 == 3</CODE> will result in <CODE>1</CODE>; and <CODE>3 == 2</CODE> will result in <CODE>0</CODE>.</TD>
						</TR>
						
						<!-- & -->
						<TR>
							<TD><CODE>&</CODE></TD>
							<TD><B>Binary AND:</B> This operand returns a set of bits specified in the second operand that exist in the first operand. <CODE>1010 AND 0011</CODE> results in <CODE>0010</CODE>.</TD>
						</TR>
						
						<!-- | -->
						<TR>
							<TD><CODE>|</CODE></TD>
							<TD><B>Binary OR:</B> This operand returns a set of bits that exist in at least one of the operands. <CODE>1010 OR 0011</CODE> results in <CODE>1011</CODE>.</TD>
						</TR>
						
						<!-- && -->
						<TR>
							<TD><CODE>&&</CODE></TD>
							<TD><B>Logical AND:</B> If both operands are non-zero, this will result in <CODE>1</CODE>, otherwise it will be <CODE>0</CODE>. If the first operand is zero then testing will be short-circuited and the second operand will not be tested.</TD>
						</TR>
						
						<!-- || -->
						<TR>
							<TD><CODE>||</CODE></TD>
							<TD><B>Logical OR:</B> If one operands is non-zero, this will result in <CODE>1</CODE>, otherwise it will be <CODE>0</CODE>. If the first operand is non-zero then testing will be short-circuited and the second operand will not be tested.</TD>
						</TR>
						
						<!-- = -->
						<TR>
							<TD><CODE>=</CODE></TD>
							<TD><B>Assignment:</B> Sets the value of the first operand to the second operand on the right. The first operand must be a variable. Example: <CODE>foo = 2</CODE> will set the value of <CODE>foo</CODE> to <CODE>2</CODE>.</TD>
						</TR>
					</TABLE>
				</P>
				</DIV>
				
				<!-- Operator Tricks -->
				<DIV id="legacyscript_expressions_optricks">
				<H3>Operatior Tricks</H3>
				<P>
					<!-- XOR -->
					<DIV id="legacyscript_expressions_optricks_xor">
					<H4>XOR (Exclusive OR)</H4>
					<P>
						A Binary XOR operator does not exist in Legacy Script. This code will simulate that operator and switch the bits around if it were ever needed.
						
						<TABLE width="75%" border="0" cellpadding="1" cellspacing="1">
						<TR><TD colspan="2"><B>Sample Code:</B></TD></TR>
						<TR><TD width="10%"></TD></TD>
						<TD class="codeblock">
							<CODE>
								<A CLASS="comment">// Simulated Binary XOR</A><BR>
								<A CLASS="reserved">script</A> 0<BR>
								{<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">int</A> num = 123456;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">int</A> xor = 654321;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">int</A> out = 0;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">int</A> b = 1;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">int</A> i;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">int</A> t;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">for</A> (i = 0, i &lt 32, i++)<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">if<A> (xor & b) <A CLASS="comment">// Check to see if we are XORing this bit</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">if</A> (num & b)<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <A CLASS="comment">// If the bit is 1, we turn it into 0</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = ~b;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = out & b;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">else</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <A CLASS="comment">// If the bit is 0, we turn it into 1</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = out | b;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">else<A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <A CLASS="comment">// Otherwise, we do not touch this bit</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = num & b;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out = out | t;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b = b * 2;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
								}<BR>
							</CODE>
						</TD></TR>
						</TABLE>
						
						If you need to use it multiple times you can also do the following:
						
						<TABLE width="75%" border="0" cellpadding="1" cellspacing="1">
						<TR><TD colspan="2"><B>Sample Code:</B></TD></TR>
						<TR><TD width="10%"></TD></TD>
						<TD class="codeblock">
							<CODE>
								<A CLASS="reserved">int</A> xor_a = 0; <A CLASS="comment">// Value to be XORed</A><BR>
								<A CLASS="reserved">int</A> xor_b = 0; <A CLASS="comment">// Value to XOR it by</A><BR>
								<A CLASS="reserved">int</A> xor_c = 0; <A CLASS="comment">// Output Value</A><BR>
								<BR>
								<A CLASS="comment">// Simulated Binary XOR inside of it's own script</A><BR>
								<A CLASS="reserved">script</A> 200<BR>
								{<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">int</A> b = 1;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">int</A> i;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">int</A> t;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;xor_c = 0; <A CLASS="comment">// Erase old value</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">for</A> (i = 0, i &lt 32, i++)<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">if<A> (xor_b & b) <A CLASS="comment">// Check to see if we are XORing this bit</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">if</A> (xor_a & b)<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <A CLASS="comment">// If the bit is 1, we turn it into 0</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = ~b;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xor_c = xor_c & b;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">else</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <A CLASS="comment">// If the bit is 0, we turn it into 1</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xor_c = xor_c | b;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">else<A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{ <A CLASS="comment">// Otherwise, we do not touch this bit</A><BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = xor_a & b;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xor_c = xor_c | t;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b = b * 2;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;}<BR>
								}<BR>
								<BR>
								<A CLASS="comment">// Small script that calls the XOR script</A><BR>
								<A CLASS="reserved">script</A> 0<BR>
								{<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;xor_a = 123456;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;xor_b = 654321;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;startscript(200);<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;<BR>
								&nbsp;&nbsp;&nbsp;&nbsp;print(xor_a, <A CLASS="string">" XOR "</A>, xor_b <A CLASS="string">" is "</A>, xor_c, <A CLASS="string">"."</A>);<BR>
								}<BR>
							</CODE>
						</TD></TR>
						</TABLE>
					</P>
					</DIV>
				</P>
				</DIV>
			</P>
			</DIV>
			
			<!-- Legacy Script Functions -->
			<DIV id="legacyscript_funcs">
			<H2>Functions</H2>
			<P>
				<!-- print -->
				<DIV id="legacyscript_func_print">
				<H3><CODE><A CLASS="reserved">void</A> print(...)</CODE></H3>
				<P>
					<B>Available in:</B> <I>Doom Legacy 1.30+</I> and <I>ReMooD 0.7a+</I><BR>
					<B>Description:</B>
						Prints a line of text to the console.
						<BR>
					<B>Parameters:</B>
						<UL>
							<LI><CODE>...</CODE> - Variable, can take up to 128 paramaters of any type.
								Non-string types will automatically be converted into strings.</LI>
						</UL>
					<B>Return Value:</B> None<BR>
					
					<TABLE width="75%" border="0" cellpadding="1" cellspacing="1">
					<TR><TD colspan="2"><B>Sample Code:</B></TD></TR>
					<TR><TD width="10%"></TD></TD>
					<TD class="codeblock">
						<CODE>
							<A CLASS="comment">// This code will print "My favorite number is 12."</A><BR>
							<A CLASS="reserved">script</A> 0<BR>
							{<BR>
							&nbsp;&nbsp;&nbsp;&nbsp;<A CLASS="reserved">int</A> number = 12;<BR>
							&nbsp;&nbsp;&nbsp;&nbsp;print(<A CLASS="string">"My favorite number is "</A>, number, <A CLASS="string">"."</A>);<BR>
							}<BR>
						</CODE>
					</TD></TR>
					</TABLE>
				</P>
				</DIV>
				
				<!-- runcommand -->
				<DIV id="legacyscript_func_runcommand">
				<H3><CODE><A CLASS="reserved">void</A> runcommand(...)</CODE></H3>
				<P>
					<B>Available in:</B> <I>Doom Legacy 1.30+</I> and <I>ReMooD 0.7a+</I><BR>
					<B>Description:</B>
						Executes passed commands in the console.
						<BR>
					<B>Parameters:</B>
						<UL>
							<LI><CODE>...</CODE> - Variable, can take up to 128 paramaters of any type.
								Non-string types will automatically be converted into strings.</LI>
						</UL>
					<B>Compatibility:</B>
						<UL>
							<LI><I>ReMooD 0.7a</I> to <I>ReMooD 0.7c</I>:
								if <CODE>scr_allowcommandexec</CODE> is set, this function will not execute
								any commands.
								<LI>
							<LI><I>ReMooD 0.8a+</I>:
								Not all console commands are supported, check the
								<A href="#legacyscript_remood_compatibility">compatibility section</A> for more
								details on what commands will work.
								</LI>
						</UL></LI>
					<B>Security Warning:</B> In <I>Doom Legacy 1.30+</I>, <I>ReMooD 0.7a</I> and <I>ReMooD 0.7b</I>,
						this function has the ability to execute any console command.<BR>
					<B>Return Value:</B> None<BR>
					
					<TABLE width="75%" border="0" cellpadding="1" cellspacing="1">
					<TR><TD colspan="2"><B>Sample Code:</B></TD></TR>
					<TR><TD width="10%"></TD></TD>
					<TD class="codeblock">
						<CODE>
							<A CLASS="comment">// This code will make the player say "Hello."</A><BR>
							<A CLASS="reserved">script</A> 0<BR>
							{<BR>
							&nbsp;&nbsp;&nbsp;&nbsp;runcommand(<A CLASS="string">"say Hello."</A>);<BR>
							}<BR>
						</CODE>
					</TD></TR>
					</TABLE>
				</P>
				</DIV>
				
			</P>
			</DIV>
		</P>
		</DIV>
		     
		<!-- ###################
		         REMOOD SCRIPT
		     ################### -->
		<DIV id="remoodscript">
		<H1>ReMooD Script</H1>
		<P>
			<!-- About -->
			<DIV id="remoodscript_about">
			<H2>About</H2>
			<P>
			</P>
			</DIV>
			
			<!-- Errors -->
			<DIV id="remoodscript_errors">
			<H2>Errors</H2>
			<P>
				<UL>
					<LI><B>Include inside function or script.</B> -- An include direction was used within a function or script block. You may only include outside of functions and scripts.</LI>
					<LI><B>Expected `(` to follow include.</B>, or <B>Expected `)` to follow include.</B> -- Includes are like-functions in that they require parenthesis after and before the include directive.</LI>
					<LI><B>Expected `;` to follow include.</B> -- Includes must be terminated by a ; after the closing parenthesis.</LI>
					<LI><B>Includes must be double quoted as strings.</B> -- The include to be parsed was not passed with a double quoted string.</LI>
					<LI><B>Include not found.</B> -- Attempted to include a lump that does not exist.</LI>
					<LI><B>Recursive include detected.</B> -- An include eventually includes itself or a script that was previous included by a parent include.</LI>
					<LI><B>Failed to open include stream.</B> -- Failed to open a stream that is able to read the include itself. If this error occurs it signifies an error in ReMooD itself.</LI>
					<LI><B>Script error while including.</B> -- There was an error inside the include, a message for the include should also be printed for reference.</LI>
					<LI><B>Script inside another script or function.</B>, or <B>Function inside another script or function.</B> -- A script or function was defined, but it was defined within an existing script or function, which is illegal.</LI>
					<LI><B>Expected a number to follow script.</B> -- Scripts are identified by the number following it and as such are required to be numbers.</LI>
					<LI><B>Expected `{` to follow script identifier.</B> -- Scripts are defined within blocks and as such require a bracket to define them.</LI>
					<LI><B>Script identifiers cannot be negative.</B> -- A script was defined but the identifer it used was a negative number</B></LI>
					<LI><B>Went outside the global scope.</B> -- The script went outside of the global scope, that is an extra '}' may have been specified.</LI>
					<LI><B>Expected end of expression.</B> -- Expected the end of the expression but it did not get that, perhaps there is a missing semi-colon.</LI>
					<LI><B>Could not solve expression.</B> -- The compiler was unable to solve the expression passed to it.</LI>
					<LI><B>Too many closing parenthesis.</B> -- Too many closing parenthesis in expression.</LI>
					<LI><B>Using reserved word as variable name.</B> -- Variable is named after a reserved word.</LI>
				</UL>
			</P>
			</DIV>
		</P>
		</DIV>
		     
		<!-- ###################
		       REMOOD ASSEMBLY
		     ################### -->
		<DIV id="assembly">
		<H1>ReMooD Assembly</H1>
		<P>
			<!-- About -->
			<DIV id="assembly_about">
			<H2>About</H2>
			<P>
				ReMooD Assembly provides lower level access to the ReMooD Virtual Machine.
			</P>
			
			<!-- Memory Access -->
			<DIV id="assembly_memory">
			<H2>Memory Access</H2>
			<P>
				Access to variables and memory is provided using 32-bit unsigned addresses.
				The memory address 0x00000000 to 0x7FFFFFFF is where standard byte code is stored, it is variable in size and changes depending on the scripts compiled.
				Access to this area is like normal memory in programming, and everything is represented as bytes.
				However, everything on and after 0x80000000 are special locations that represent different areas.
				They are not like standard memory and act as pointers to other locations.
				
				<TABLE width="100%" cellpadding="1" cellspacing="1" border="1">
					<!-- TOP ROW -->
					<TR>
						<TD width="25%"><CENTER><B>Location</B></CENTER></TD>
						<TD width="75%"><CENTER><B>Description</B></CENTER></TD>
					</TR>
				
					<!-- BYTE CODE -->
					<TR>
						<TD>
							0x00000000 to 0x7FFFFFFF<BR>
							Byte Code
						</TD>
						<TD>
							<B>Size</B>: 2,147,483,647 bytes<BR>
							Contains all compiled bytecode, not all addresses may be available.
						</TD>
					</TR>
				
					<!-- VARIABLE SPACE (GLOBAL) -->
					<TR>
						<TD>
							0x80000000 to 0x87FFFFFF<BR>
							Global Symbol Mapping Space
						</TD>
						<TD>
							<B>Size</B>: 134,217,727 bytes<BR>
							Contains all non-hub variables, constants and functions. This area is a reference area which means that only single values point to objects in memory. 0x80000000 may contain a variable that is 4 bytes in size but the reference is only a single byte. All user created objects are stored here, including objects inside scopes. Due to the size limitation, there is a theoretical maximum of 134,217,727 variables. Built-in symbols and functions are placed in reversed order from the end (example: 0x87FFFFFF may be the built-in constant PORTNAMESTRING, but a symbol lookup should be done to make sure that is is).
						</TD>
					</TR>
				
					<!-- VARIABLE SPACE (LOCAL) -->
					<TR>
						<TD>
							0x88000000 to 0x8BFFFFFF<BR>
							Local Symbol Mapping Space
						</TD>
						<TD>
							<B>Size</B>: 67,108,863 bytes<BR>
							Similar to to the global variable space except that these point to variable pointers in the global variable space. This area is further split into subsections depending on the value of MAXDEEPCALLS. When local variables are created inside of functions, global variables are added then the subsections of this group are mapped to the correct global value. In 0.8a, this value is 10 which limits local variables to 67,108,863 per recursive function.
						</TD>
					</TR>
				
					<!-- VARIABLE SPACES (HUB) -->
					<TR>
						<TD>
							0x8C000000 to 0x8FFFFFFF<BR>
							Hub Symbol Mapping Space
						</TD>
						<TD>
							<B>Size</B>: 67,108,863 bytes<BR>
							These are variables, constants and functions that are available in all scripts across all domains. There is a limit of 67,108,863 objects, there are no built-in mappings to these.
						</TD>
					</TR>
				
					<!-- VIRTUAL MAP -->
					<TR>
						<TD>
							0x90000000 to 0x9FFFFFFF<BR>
							Virtual Data Map
						</TD>
						<TD>
							<B>Size</B>: 4,096 sections of 65,536 bytes<BR>
							This area can be mapped to variable data for direct access. There are 4,096 objects that can be mapped here. 0x9sssDDDD where <u>s</u> is sections for access and <u>D</u> is the data available to access.
						</TD>
					</TR>
				
					<!-- HIGH VIRTUAL MAP -->
					<TR>
						<TD>
							0xA0000000 to 0xAFFFFFFF<BR>
							High Virtual Data Map
						</TD>
						<TD>
							<B>Size</B>: 268,435,456 bytes<BR>
							This area can be mapped to a single variable for direct access. Similar to the Virtual Data Map but allows access to more data but in only a single section.
						</TD>
					</TR>
				
					<!-- REGISTER MAP -->
					<TR>
						<TD>
							0xB0000000 to 0xBFFFFFFF<BR>
							Register Map
						</TD>
						<TD>
							<B>Size</B>: 268,435,456 bytes<BR>
							This area is made up of virtual registers, the maximum allowed is MAXREGISTERS, in 0.8a this is 100.
						</TD>
					</TR>
					
					<!-- USER ZONE -->
					<TR>
						<TD>
							0xC0000000 to 0xCFFFFFFF<BR>
							User Zone
						</TD>
						<TD>
							<B>Size</B>: 268,435,456 bytes<BR>
							Contains all allocated by user memory, not all addresses may be available.
						</TD>
					</TR>
					
					<!-- INVALID -->
					<TR>
						<TD>
							0xFFFFFFFF<BR>
							Invalid
						</TD>
						<TD>
							<B>Size</B>: 1 bytes<BR>
							Invalid memory, any reading or writing to this value will stop the script.
						</TD>
					</TR>
				</TABLE>
			</P>
			
			<!-- Instructions -->
			<DIV id="assembly_instructions">
			<H2>Instructions</H2>
			<P>
				<!-- NULL -->
				<DIV id="assembly_instructions_null">
				<H3><CODE>NULL ()</CODE></H3>
				<P>
					<B>Available in:</B> <I>ReMooD 0.7b+</I><BR>
					<B>Description:</B>
						NULL Instruction, this does nothing.
						<BR>
				</P>
				</DIV>
				
				<!-- ADD -->
				<DIV id="assembly_instructions_add">
				<H3><CODE>ADD (u:dest, i:add)</CODE></H3>
				<P>
					<B>Available in:</B> <I>ReMooD 0.7b+</I><BR>
					<B>Description:</B>
						Adds the value in <CODE>add</CODE> to the value in <CODE>dest</CODE>.
						<BR>
					<B>Parameters:</B>
						<UL>
							<LI><CODE>u:dest</CODE> - Memory location to be modified.</LI>
							<LI><CODE>i:add</CODE> - Value to add.</LI>
						</UL>
				</P>
				</DIV>
				
				<!-- SUBTRACT -->
				<DIV id="assembly_instructions_subtract">
				<H3><CODE>SUBTRACT (u:dest, i:sub)</CODE></H3>
				<P>
					<B>Available in:</B> <I>ReMooD 0.7b+</I><BR>
					<B>Description:</B>
						Subtracts the value in <CODE>sub</CODE> to the value in <CODE>dest</CODE>.
						<BR>
					<B>Parameters:</B>
						<UL>
							<LI><CODE>u:dest</CODE> - Memory location to be modified.</LI>
							<LI><CODE>i:add</CODE> - Value to subtract.</LI>
						</UL>
				</P>
				</DIV>
			</P>
		</P>
		</DIV>
		
		<!-- ###################
		       COMPARISON
		     ################### -->
		<DIV id="comparison">
		<H1>Comparison of Scripting Languages</H1>
		<P>
			This comparison chart is based on features and limitations.
			
			<TABLE WIDTH="100%" BORDER="1" CELLPADDING="1" CELLSPACING="1">
				<!-- Top Row -->
				<TR>
					<TD WIDTH="25%" BGCOLOR="#000000"><FONT COLOR="#ffffff"><B>Feature/Limitation</B></FONT></TD>
					<TD WIDTH="10%" BGCOLOR="#222222"><FONT COLOR="#ffffff"><B>ReMooD Script</B></FONT></TD>
					<TD WIDTH="10%" BGCOLOR="#2222ff"><FONT COLOR="#ffffff"><B>ReMooD Assembly</B></FONT></TD>
					<TD WIDTH="10%" BGCOLOR="#222222"><FONT COLOR="#ffffff"><B>Legacy Script</B></FONT></TD>
					<TD WIDTH="10%" BGCOLOR="#2222ff"><FONT COLOR="#ffffff"><B>ACS</B></FONT></TD>
					<TD WIDTH="10%" BGCOLOR="#222222"><FONT COLOR="#ffffff"><B>Small</B></FONT></TD>
				</TR>
				
				<!-- 
				<TR>
					<TD>Feature/Limitation</TD>
					<TD CLASS="roweven">ReMooD</TD>
					<TD CLASS="rowodd">ReMooDASM</TD>
					<TD CLASS="roweven">LS</TD>
					<TD CLASS="rowodd">ACS</TD>
					<TD CLASS="roweven">Small</TD>
				</TR>
				-->
				
				<TR>
					<TD>Exists in ports</TD>
					<TD CLASS="roweven">ReMooD</TD>
					<TD CLASS="rowodd">ReMooD</TD>
					<TD CLASS="roweven">ReMooD, Legacy and SMMU</TD>
					<TD CLASS="rowodd">Hexen and ZDoom</TD>
					<TD CLASS="roweven">Eternity</TD>
				</TR>
				
				<TR>
					<TD>Year script released</TD>
					<TD CLASS="roweven">2008+ (TBD)</TD>
					<TD CLASS="rowodd">2008+ (TBD)</TD>
					<TD CLASS="roweven">2000?</TD>
					<TD CLASS="rowodd">1995</TD>
					<TD CLASS="roweven">2008?</TD>
				</TR>
				
				<TR>
					<TD>Documentation</TD>
					<TD CLASS="roweven">This File</TD>
					<TD CLASS="rowodd">This File</TD>
					<TD CLASS="roweven">This File</TD>
					<TD CLASS="rowodd"><A HREF="http://www.zdoom.org/">ZDoom Site</A></TD>
					<TD CLASS="roweven">?</TD>
				</TR>
				
				<TR>
					<TD>Base Language</TD>
					<TD CLASS="roweven">Pascal</TD>
					<TD CLASS="rowodd">Assembly</TD>
					<TD CLASS="roweven">C</TD>
					<TD CLASS="rowodd">C</TD>
					<TD CLASS="roweven">?</TD>
				</TR>
				
				<TR>
					<TD>Storage Method</TD>
					<TD CLASS="roweven">Plain Text</TD>
					<TD CLASS="rowodd">Plain Text</TD>
					<TD CLASS="roweven">Plain Text</TD>
					<TD CLASS="rowodd">Bytecode (Binary)</TD>
					<TD CLASS="roweven">Bytecode (Binary)</TD>
				</TR>
				
				<TR>
					<TD>Execution Method</TD>
					<TD CLASS="roweven">Byte Code Execution</TD>
					<TD CLASS="rowodd">Byte Code Execution</TD>
					<TD CLASS="roweven">Interpreted (Byte Code Execution in ReMooD)</TD>
					<TD CLASS="rowodd">Byte Code Execution</TD>
					<TD CLASS="roweven">Byte Code Execution</TD>
				</TR>
				
				<TR>
					<TD>Compiler Location</TD>
					<TD CLASS="roweven">Internal</TD>
					<TD CLASS="rowodd">Internal</TD>
					<TD CLASS="roweven">None (Internal in ReMooD)</TD>
					<TD CLASS="rowodd">External</TD>
					<TD CLASS="roweven">External</TD>
				</TR>
				
				<TR>
					<TD>Allows custom functions</TD>
					<TD CLASS="roweven">Yes</TD>
					<TD CLASS="rowodd">Yes</TD>
					<TD CLASS="roweven">No</TD>
					<TD CLASS="rowodd">No</TD>
					<TD CLASS="roweven">?</TD>
				</TR>
				
				<TR>
					<TD>Allows modification of byte code on the fly</TD>
					<TD CLASS="roweven">No</TD>
					<TD CLASS="rowodd">Yes (But is not recommended)</TD>
					<TD CLASS="roweven">-</TD>
					<TD CLASS="rowodd">No</TD>
					<TD CLASS="roweven">No</TD>
				</TR>
				
				<TR>
					<TD>Allows inline assembly</TD>
					<TD CLASS="roweven">Yes</TD>
					<TD CLASS="rowodd">-</TD>
					<TD CLASS="roweven">-</TD>
					<TD CLASS="rowodd">No</TD>
					<TD CLASS="roweven">No</TD>
				</TR>
				
				<TR>
					<TD>Allows flow control</TD>
					<TD CLASS="roweven">Loops & Labels</TD>
					<TD CLASS="rowodd">Loops, Jumps and Calls</TD>
					<TD CLASS="roweven">Loops & Labels</TD>
					<TD CLASS="rowodd">Loops</TD>
					<TD CLASS="roweven">?</TD>
				</TR>
				
				<TR>
					<TD>Allows lines to call scripts</TD>
					<TD CLASS="roweven">Yes</TD>
					<TD CLASS="rowodd">Yes (via callbacks)</TD>
					<TD CLASS="roweven">Yes</TD>
					<TD CLASS="rowodd">Yes</TD>
					<TD CLASS="roweven">Yes</TD>
				</TR>
				
				<TR>
					<TD>Allows sectors to call scripts</TD>
					<TD CLASS="roweven">Yes (via callbacks)</TD>
					<TD CLASS="rowodd">Yes (via callbacks)</TD>
					<TD CLASS="roweven">No</TD>
					<TD CLASS="rowodd">Yes</TD>
					<TD CLASS="roweven">?</TD>
				</TR>
				
				<TR>
					<TD>Allows things to call scripts (ex: when it dies)</TD>
					<TD CLASS="roweven">Yes (via callbacks)</TD>
					<TD CLASS="rowodd">Yes (via callbacks)</TD>
					<TD CLASS="roweven">No</TD>
					<TD CLASS="rowodd">?</TD>
					<TD CLASS="roweven">?</TD>
				</TR>
				
				<TR>
					<TD>Allows custom parameters sent to scripts</TD>
					<TD CLASS="roweven">No</TD>
					<TD CLASS="rowodd">No</TD>
					<TD CLASS="roweven">No</TD>
					<TD CLASS="rowodd">Yes (Hexen only)</TD>
					<TD CLASS="roweven">?</TD>
				</TR>
				
				<TR>
					<TD>Maximum number of scripts permitted</TD>
					<TD CLASS="roweven">65,536</TD>
					<TD CLASS="rowodd">65,536</TD>
					<TD CLASS="roweven">256 (65,536 in ReMooD)</TD>
					<TD CLASS="rowodd">256</TD>
					<TD CLASS="roweven">?</TD>
				</TR>
				
				<!-- Bottom Row -->
				<TR>
					<TD WIDTH="25%" BGCOLOR="#000000"><FONT COLOR="#ffffff"><B>Feature/Limitation</B></FONT></TD>
					<TD WIDTH="10%" BGCOLOR="#222222"><FONT COLOR="#ffffff"><B>ReMooD Script</B></FONT></TD>
					<TD WIDTH="10%" BGCOLOR="#2222ff"><FONT COLOR="#ffffff"><B>ReMooD Assembly</B></FONT></TD>
					<TD WIDTH="10%" BGCOLOR="#222222"><FONT COLOR="#ffffff"><B>Legacy Script</B></FONT></TD>
					<TD WIDTH="10%" BGCOLOR="#2222ff"><FONT COLOR="#ffffff"><B>ACS</B></FONT></TD>
					<TD WIDTH="10%" BGCOLOR="#222222"><FONT COLOR="#ffffff"><B>Small</B></FONT></TD>
				</TR>
				
			</TABLE>
		</P>
		</DIV>
	</BODY>
</HTML>

