----------------------------------------------------------------------------
        :oCCCCOCoc.
    .cCO8OOOOOOOOO8Oo:
  .oOO8OOOOOOOOOOOOOOOCc
 cO8888:         .:oOOOOC.                                                TM
:888888:   :CCCc   .oOOOOC.     ###      ###                    #########
C888888:   .ooo:   .C########   #####  #####  ######    ######  ##########
O888888:         .oO###    ###  #####  ##### ########  ######## ####    ###
C888888:   :8O.   .C##########  ### #### ### ##    ##  ##    ## ####    ###
:8@@@@8:   :888c   o###         ### #### ### ########  ######## ##########
 :8@@@@C   C@@@@   oo########   ###  ##  ###  ######    ######  #########
   cO@@@@@@@@@@@@@@@@@Oc0
     :oO8@@@@@@@@@@Oo.
        .oCOOOOOCc.                                      http://remood.org/
----------------------------------------------------------------------------
Copyright (C) 2013-2013 GhostlyDeath <ghostlydeath@remood.org>
                                     <ghostlydeath@gmail.com>
----------------------------------------------------------------------------
This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 3
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
----------------------------------------------------------------------------

Protocol for launcher implementations.

All data transmitted over the network is in little-endien byte order.
Reponses may not always be in the same order due to UDP scrambling.

Basic types:
	i8 = int8_t, 1 byte, -128 to 127
	i16 = int16_t, 2 bytes, -32768 to 32767
	i32 = int32_t, 4 bytes,
	i64 = int64_t, 8 bytes,
	u8 = uint8_t, 1 byte, 0 to 255
	u16 = uint16_t, 2 bytes, 0 to 65535
	u32 = uint32_t, 4 bytes,
	u64 = uint64_t, 8 bytes,
	c64 = Packed uint64_t, size varies, see unpacking below
	str = String, size varies, NUL terminated

Unpacking the c64 type:

*** IXBI: Server Information

*** IXST: State Information

*** IXWD: WADs

WADs have two names:
	Long:	The base name of a WAD as represented on the server.
	DOS:	An uppercased stripped version of the long name.
			If a WAD cannot be found by its long name or if the client does
			not support long file names then this name is used instead.

u8	WAD Flags
		0x01 = Present, if zero, stop reading WADs
		0x02 = Optional (is not required)
str	DOS Name
		DOS Name of the WAD (8.3 format, i.e. DOOM2.WAD or REALLYLO.WAD)
str Long Name
		Long Name of the WAD (i.e. doom2.wad, reallylongname.wad)
str	MD5 CheckSum

