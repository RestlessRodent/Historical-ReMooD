        :oCCCCOCoc.
    .cCO8OOOOOOOOO8Oo:
  .oOO8OOOOOOOOOOOOOOOCc
 cO8888:         .:oOOOOC.                                                  TM
:888888:   :CCCc   .oOOOOC.     ###      ###                    #########
C888888:   .ooo:   .C########   #####  #####  ######    ######  ##########
O888888:         .oO###    ###  #####  ##### ########  ######## ####    ###
C888888:   :8O.   .C##########  ### #### ### ##    ##  ##    ## ####    ###
:8@@@@8:   :888c   o###         ### #### ### ########  ######## ##########
 :8@@@@C   C@@@@   oo########   ###  ##  ###  ######    ######  #########
   cO@@@@@@@@@@@@@@@@@Oc0
     :oO8@@@@@@@@@@Oo.                               1.0a "Stuffed Cabbage"
        .oCOOOOOCc.                                      http://remood.org/

 ReMooD is a source port of Doom Legacy 1.42. It aims to provide the classic
 Legacy Experience with new features and more stability.
 
 Copyright (C) 2011 GhostlyDeath <ghostlydeath@remood.org>
 
 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU General Public License
 as published by the Free Software Foundation; either version 3
 of the License, or (at your option) any later version.
 
 This program is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU General Public License for more details.
 
-------------------------------------------------------------------------------

in r_splats.c, make wallsplats a dynamic array instead of a static one of size
MAXLEVELSPLATS. This way, global memory space is reduced potentially and the
game memory can be managed better.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Game Stats (for intermission screen and global profile score keeping)
* Frags (Count, All)
* Deaths (Count, All)
* Suicides (Count)
* Friendly Frags (Count)
* Enemy Frags (Count)
* Frags to Specific Player (Count, for all other players)
* Deaths from Specific Player (Count, for all other players)
* Deaths from Friendlies (Count)
* Deaths from Enemies (Count)
* Greatest Successive Frags (Count, Most frags within 1 second window)
* Spawn Kills Dealt (Count, Frags within 3 seconds of player spawn)
* Spawn Kills Recieved (Count, Frags within 3 seconds of player spawn)
* Telefrags Dealt (Count, Frags done via telefrag)
* Telefrags Recieved (Count, times killed by a telefrag)
* Total Damage Dealt (Percentage)
* Total Damage Taken (Percentage)
* Highest Damage Dealt (Percentage, The highest damage done in a single tic)
* Highest Damage Taken (Percentage, The highest damage recieved in a single tic)
* Friendly Armor Damage Dealt (Percentage)
* Friendly Armor Damage Taken (Percentage)
* Total Time Played (Time)
* Games Won (Count)
* Games Lost (Count)
* Grand Accuracy (Average of all Accuracies)
* Accuracy (Percentage, Per weapon)
* Grand Ammo Used (Count, Total of all ammos)
* Ammo Used (Count, Per ammo type)
* Maximum Speed (In SR50s format)
* Average Speed (In SR50s format)
* Distance Traveled (In Map Units)
* Longest Life (Time)
* Shortest Life (Time)
* Average Life (Time)
* Longest Death (Time)
* Shortest Death (Time)
* Average Death (Time)
* Monster Kills (Count, Per monster)
* Deaths from Monster (Count, Per monster)
* Flags Picked Up (Count, Enemy)
* Flags Recovered (Count, Friendly)
* Flags Returned (Count, Friendly)
* Flags Captured (Count, Enemy)
* Flags Tossed (Count, Flag thrown away)
* Flags Dropped (Count, From death)
* Fastest Capture Time (Time)
* Slowest Capture Time (Time)
* Average Capture Time (Time)
* Items Picked Up (Count, for all item types)
* Inventory Items Used (Count, for all inventory items)

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

ReMooD Doom Script Virtual Machine, for execution of virtual code.

Use extended Legacy Script syntax, but mostly syntactically compatible. First
tokenize an entire script with includes into a structure element as followed:

struct
{
	TokenType_t TokenType;				// Type of token (ident., number, etc.)
	uint8_t* TokenPtr;					// Pointer to token
	size_t TokenSize;					// Size of token
};

Then after that, create scope zones for scopes and paranthesis. So essentially

script 10 { print ( "Hello world!" ) ; playeraddfrag ( player ( trigger ) ) ;
if ( playergetfrag ( player ( trigger ) ) == 2 + 2 ) { print (
"You now have 4 frags!" ) ; } } 

Would become

script 10
	__BEGIN_SCOPE
	print
		__BEGIN_PAR
		"Hello world!"
		__END_STATEMENT
		__END_PAR
	__END_STATEMENT
	playeraddfrag
		__BEGIN_PAR
		player
			__BEGIN_PAR
				trigger
				__END_STATEMENT
			__END_PAR
		__END_PAR
		__END_STATEMENT
	__END_STATEMENT
	if
		__BEGIN_PAR
		playergetfrag
			__BEGIN_PAR
			player
				__BEGIN_PAR
				trigger
				__END_PAR
				__END_STATEMENT
			__END_PAR
			__END_STATEMENT
		==
		2
		+
		2
		__END_PAR
		__END_STATEMENT
	__END_STATEMENT
		__BEGIN_SCOPE
			print
				__BEGIN_PAR
				"You now have 4 frags!"
				__END_PAR
				__END_STATEMENT
			__END_STATEMENT
		__END_SCOPE
	__END_SCOPE

Statements contain actual code. When a statement executes it returns something
logically speaking. The deepest statements and scopes are done first, then it
branches out to the lower ones.

For all case and purposes, { and } are treated as if they were ; on statement
boundaries.


