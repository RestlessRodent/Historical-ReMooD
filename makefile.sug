#         :oCCCCOCoc.
#     .cCO8OOOOOOOOO8Oo:
#   .oOO8OOOOOOOOOOOOOOOCc
#  cO8888:         .:oOOOOC.                                                TM
# :888888:   :CCCc   .oOOOOC.     ###      ###                    #########
# C888888:   .ooo:   .C########   #####  #####  ######    ######  ##########
# O888888:         .oO###    ###  #####  ##### ########  ######## ####    ###
# C888888:   :8O.   .C##########  ### #### ### ##    ##  ##    ## ####    ###
# :8@@@@8:   :888c   o###         ### #### ### ########  ######## ##########
#  :8@@@@C   C@@@@   oo########   ###  ##  ###  ######    ######  #########
#    cO@@@@@@@@@@@@@@@@@Oc0
#      :oO8@@@@@@@@@@Oo.
#         .oCOOOOOCc.                                      http://remood.org/
# -----------------------------------------------------------------------------
# Copyright (C) 2009-2011 GhostlyDeath <ghostlydeath@remood.org>
# -----------------------------------------------------------------------------
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# -----------------------------------------------------------------------------
# SunCC on GNUmake

################
### COMPILER ###
################

# If $(CC) is cc, make it gcc!
ifndef KEEPCC
	ifeq (cc,$(CC))
		export CC := suncc
	endif
endif

# Use toolchain prefix on default $(CC)
ifneq (,$(TOOLPREFIX))
	export __INT_CC := $(strip $(TOOLPREFIX))
	export __INT_WINDRES := $(strip $(TOOLPREFIX))
	export __INT_AR := $(strip $(TOOLPREFIX))
endif
export __INT_CC := $(__INT_CC)$(CC)
export __INT_WINDRES := $(__INT_WINDRES)$(WINDRES)
export __INT_AR := $(__INT_AR)$(AR)

#####################
### COMPILE FLAGS ###
#####################

__INT_COMMONCFLAGS  := 
__INT_COMMONLDFLAGS := -lm

# Debugging?
ifdef DEBUG
	__INT_MCFLAGS := -g -O0 -D_DEBUG
	__INT_MLDFLAGS := -g
	__INT_RCFLAGS := -D_DEBUG
	export __INT_OBJPREFIX := d
	export __INT_EXESUFFIX := -dbg
else
	__INT_MCFLAGS := -O2 -DNDEBUG
	__INT_MLDFLAGS :=
	__INT_RCFLAGS := -DNDEBUG
	export __INT_OBJPREFIX := r
	export __INT_EXESUFFIX :=
endif

# CC Flags
export __INT_CFLAGS := $(CFLAGS) $(__INT_COMMONCFLAGS) $(__INT_MCFLAGS)

# Linker Flags
export __INT_LDFLAGS := $(LDFLAGS) $(__INT_COMMONLDFLAGS) $(__INT_MLDFLAGS)

# Interface?
export __INT_INTERFACE := $(USEINTERFACE)

##################################
### HOW DO WE EXECUTE COMMANDS ###
#################################/

# Ugly lowercasing for shells
__INT_LOWERJUNK = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))

# Do lowercasing
__INT_LSHELL   := $(call __INT_LOWERJUNK,$(SHELL))
__INT_LCOMSPEC := $(call __INT_LOWERJUNK,$(COMSPEC))

# When using GNUWin32's make on Windows, it seems COMSPEC is NOT passed to
# make when it should be. Therefor, set COMPSPEC since ths shell must be known.
ifeq (,$(strip $(__INT_LCOMSPEC)))
	__INT_HCOMSPEC := $(strip $(shell ____spec))
	__INT_LCOMSPEC := $(call __INT_LOWERJUNK,$(__INT_HCOMSPEC))
	
	ifneq (,$(strip $(__INT_LCOMSPEC)))
		__INT_CHECKREALSH := yes
	endif
endif

# Another thing to check on GNUWin32 is that SHELL is set to sh.exe (which in
# most cases, does not exist). A simple case is to check whether a command
# actually prints what I want it to print.
ifeq (yes,$(strip $(__INT_CHECKREALSH)))
	__INT_CHECKSHELL := $(call __INT_LOWERJUNK,$(strip $(shell $(SHELL) echo hello)))
	
	# If it does not say hello then it does not exist
	ifneq (hello,$(strip $(__INT_CHECKSHELL)))
		__INT_LSHELL := $(__INT_LCOMSPEC)
		export COMSPEC := $(__INT_HCOMSPEC)
	endif
endif

# Check if COMSPEC is set, if it we, are are on crippled WinDOS
#  GNU Make always sets $(SHELL) to something
#    DOS    : COMSPEC should match SHELL (for DJGPP at least)
#    CygWin : SHELL == /bin/sh, COMPSPEC = command (Use shell here)
#    Windows: COMPSEC should match SHELL
ifeq ($(strip $(__INT_LSHELL)),$(strip $(__INT_LCOMSPEC)))
	__INT_RUNCURDIR  = 
	__INT_DELETE     = del
	__INT_RUNCOMMAND = $(COMSPEC) /C $1
	export __INT_ISONDOS = yes

# Otherwise assume a UNIX shell, or at least a compatible one
else
	__INT_RUNCURDIR  = ./
	__INT_DELETE     = rm -f
	__INT_RUNCOMMAND = $(SHELL) -c "$1"
	export __INT_ISONDOS = no

#
endif

#####################
### LIBRARY STUFF ###
#####################

### SDL ###

# Use sdl-config if SDL_LIB and SDL_INCLUDE are not set
ifeq (,$(strip $(SDL_LIB))$(strip $(SDL_INCLUDE)))
	ifneq (,$(findstring 1.2,$(strip $(shell $(call __INT_RUNCOMMAND,sdl-config --version)))))
		export __INT_SDLCFLAGS  := $(shell $(call __INT_RUNCOMMAND,sdl-config --cflags))
		export __INT_SDLLDFLAGS := $(shell $(call __INT_RUNCOMMAND,sdl-config --libs))
	endif
endif

# Fall back to environment variables
ifeq (,$(strip $(__INT_SDLCFLAGS)))
	ifneq (,$(strip $(SDL_INCLUDE)))
		export __INT_SDLCFLAGS  := -I$(SDL_INCLUDE)
	else
		export __INT_SDLCFLAGS  := -Iinclude -ISDL
	endif
endif

ifeq (,$(strip $(__INT_SDLLDFLAGS)))
	ifneq (,$(strip $(SDL_LIB)))
		export __INT_SDLLDFLAGS := -L$(SDL_LIB) -lSDLmain -lSDL
	else
		export __INT_SDLLDFLAGS := -Llib -lSDLmain -lSDL
	endif
endif

### ALLEGRO ###

# Use allegro-config if ALLEGRO_LIB and ALLEGRO_INCLUDE are not set
ifeq (,$(strip $(ALLEGRO_LIB))$(strip $(ALLEGRO_INCLUDE)))
	ifneq (,$(findstring 4.2,$(strip $(shell $(call __INT_RUNCOMMAND,allegro-config --version)))))
		export __INT_ALLEGROCFLAGS  := $(shell $(call __INT_RUNCOMMAND,allegro-config --cflags))
		export __INT_ALLEGROLDFLAGS := $(shell $(call __INT_RUNCOMMAND,allegro-config --libs))
	endif
endif

# Fall back to environment variables
ifeq (,$(strip $(__INT_ALLEGROCFLAGS)))
	ifneq (,$(strip $(ALLEGRO_INCLUDE)))
		export __INT_ALLEGROCFLAGS  := -I$(ALLEGRO_INCLUDE)
	else
		export __INT_ALLEGROCFLAGS  := -Iinclude -Iallegro
	endif
endif

ifeq (,$(strip $(__INT_ALLEGROLDFLAGS)))
	ifneq (,$(strip $(ALLEGRO_LIB)))
		export __INT_ALLEGROLDFLAGS := -L$(ALLEGRO_LIB) -lalleg
	else
		export __INT_ALLEGROLDFLAGS := -Llib -lalleg
	endif
endif

###############
### TARGETS ###
##############/

# Object Location
export __INT_OBJ := objs

##################################
### HOW DO WE EXECUTE COMMANDS ###
##################################


# Ugly lowercasing for shells
__XX_LOWERJUNK = $(subst A,a,$(subst B,b,$(subst C,c,$(subst D,d,$(subst E,e,$(subst F,f,$(subst G,g,$(subst H,h,$(subst I,i,$(subst J,j,$(subst K,k,$(subst L,l,$(subst M,m,$(subst N,n,$(subst O,o,$(subst P,p,$(subst Q,q,$(subst R,r,$(subst S,s,$(subst T,t,$(subst U,u,$(subst V,v,$(subst W,w,$(subst X,x,$(subst Y,y,$(subst Z,z,$1))))))))))))))))))))))))))

# Do lowercasing
__XX_LSHELL   := $(call __XX_LOWERJUNK,$(SHELL))
__XX_LCOMSPEC := $(call __XX_LOWERJUNK,$(COMSPEC))

# Executing sub-make in DOS/Win?
ifeq (yes,$(strip $(__INT_ISONDOS)))
	__XX_RUNCURDIR  := 
	__XX_DELETE     := del
	__XX_DIRSEP     := $(strip \ )
	__XX_RUNCOMMAND = $(COMSPEC) /C $1
	__XX_DOSPATH    = $(subst /,\,$1)
	__XX_DEVNULL	:= NUL

else
	__XX_RUNCURDIR  := ./
	__XX_DELETE     := rm -f
	__XX_DIRSEP     := /
	__XX_RUNCOMMAND = $(SHELL) -c "$1"
	__XX_DOSPATH    = $1
	__XX_DEVNULL    := /dev/null

endif

###################
### DIRECTORIES ###
###################

__XX_BIN = bin
__XX_SRC = src
__XX_OBJ = $(__INT_OBJ)
__XX_RC  = rc

ifneq (,$(strip $(__INT_INTERFACE)))
	__XX_DEFINTRF := $(__INT_INTERFACE)
endif

##########################
### SYSTEM DEFINITIONS ###
##########################

__XX_OBJPREFIX = w
__XX_ICFLAGS  = -D__REMOOD_SYSTEM_NONCROSS
__XX_ILDFLAGS = 
__XX_DEFINTRF ?= sdl
__XX_EXTRAOBJ = 

##########################
### SELECTED INTERFACE ###
##########################

# SDL Interface
ifeq (sdl,$(strip $(__XX_DEFINTRF)))
	# Basic Settings
	__XX_IFACEDIR = sdl
	__XX_FPREFIX = s
	__XX_FCFLAGS = -D__REMOOD_INTERFACE_SDL $(__INT_SDLCFLAGS)
	__XX_FLDFLAGS = $(__INT_SDLLDFLAGS)
else
	# Allegro Interface
	ifeq (allegro,$(strip $(__XX_DEFINTRF)))
		__XX_IFACEDIR = allegro
		__XX_FPREFIX = a
		__XX_FCFLAGS = -D__REMOOD_INTERFACE_ALLEGRO $(__INT_ALLEGROCFLAGS)
		__XX_FLDFLAGS = $(__INT_ALLEGROLDFLAGS)
	else
		# Raw Windows Interface
		ifeq (win36c,$(strip $(__XX_DEFINTRF)))
			__XX_IFACEDIR = win36c
			__XX_FPREFIX = w
			__XX_FCFLAGS = -D__REMOOD_INTERFACE_WIN36C
			__XX_FLDFLAGS = 
		else
			# Headless interface
			ifeq (headless,$(strip $(__XX_DEFINTRF)))
				__XX_IFACEDIR = headless
				__XX_FPREFIX = h
				__XX_FCFLAGS = -D__REMOOD_INTERFACE_HEADLESS
				__XX_FLDFLAGS = 
			endif
		endif
	endif
endif

##############
### CFLAGS ###
##############

__XX_CFLAGS := -I$(__XX_SRC) $(__INT_CFLAGS) $(__XX_ICFLAGS) $(__XX_FCFLAGS)
__XX_LDFLAGS := $(__XX_ILDFLAGS) $(__INT_LDFLAGS) $(__XX_FLDFLAGS) 
__XX_RCFLAGS := -DMINGWMAKED $(__INT_RCFLAGS)
__XX_OBJPRIME := $(__INT_OBJPREFIX)$(__XX_OBJPREFIX)$(__XX_FPREFIX)

###############
### OBJECTS ###
###############

__XX_OBJS := $(foreach __X_SOURCE, $(__XX_EXTRAOBJ) $(wildcard $(__XX_SRC)/*.c) $(wildcard $(__XX_SRC)/$(__XX_IFACEDIR)/*.c), $(__XX_OBJ)/$(basename $(notdir $(__X_SOURCE))).$(__XX_OBJPRIME))
__XX_OBJSCLEAN := $(foreach __X_OBJ, $(__XX_OBJS), __$(notdir $(__X_OBJ)))

###############
### TARGETS ###
###############

# All: Default
.PHONY: all
all:													remood
														

# Clean targets
.PHONY: clean
clean:													$(__XX_OBJSCLEAN)
														@echo [RM] remood
														@$(call __XX_RUNCOMMAND,$(__XX_DELETE) $(call __XX_DOSPATH,$(__XX_BIN)/remood$(__INT_EXESUFFIX)$(__XX_EXESUFFIX))) > $(__XX_DEVNULL)

# Alias for binary
remood:													$(__XX_BIN)/remood$(__INT_EXESUFFIX)$(__XX_EXESUFFIX)
														

# The actual binary
$(__XX_BIN)/remood$(__INT_EXESUFFIX)$(__XX_EXESUFFIX):	$(__XX_OBJS)
														@echo [LD] $(notdir $@)
														@$(__INT_CC) -o $@ $(__XX_OBJS) $(__XX_LDFLAGS)

# Source files in src/
$(__XX_OBJ)/%.$(__XX_OBJPRIME):							$(__XX_SRC)/%.c
														@echo [CC] $(notdir $<)
														@$(__INT_CC) -c $< -o $@ $(__XX_CFLAGS)

# Source files in interfaces
$(__XX_OBJ)/%.$(__XX_OBJPRIME):							$(__XX_SRC)/$(__XX_IFACEDIR)/%.c
														@echo [CC] $(notdir $<)
														@$(__INT_CC) -c $< -o $@ $(__XX_CFLAGS) $(__XX_IXFCFLAGS)

# ReMooD Win32 RC File
$(__XX_OBJ)/%.$(__XX_OBJPRIME):							$(__XX_RC)/%.rc
														@echo [RC] $(notdir $<)
														@$(__INT_WINDRES) --input-format=rc -o $@ $< -O coff $(__XX_RCFLAGS)

# Clean object files built
__%.$(__XX_OBJPRIME):									
														@$(if $(wildcard $(__XX_OBJ)/$(subst __,,$@)),echo [RM] $(subst __,,$(basename $@)).o,)
														@$(if $(wildcard $(__XX_OBJ)/$(subst __,,$@)),$(call __XX_RUNCOMMAND,$(__XX_DELETE) $(call __XX_DOSPATH,$(__XX_OBJ)/$(subst __,,$@))) > $(__XX_DEVNULL),)

