// -*- Mode: C; indent-tabs-mode: t; c-basic-offset: 4; tab-width: 4 -*-
// -----------------------------------------------------------------------------
// ########   ###### #####   #####  ######   ######  ######
// ##     ##  ##     ##  ## ##  ## ##    ## ##    ## ##   ##
// ##     ##  ##     ##   ###   ## ##    ## ##    ## ##    ##
// ########   ####   ##    #    ## ##    ## ##    ## ##    ##
// ##    ##   ##     ##         ## ##    ## ##    ## ##    ##
// ##     ##  ##     ##         ## ##    ## ##    ## ##   ##
// ##      ## ###### ##         ##  ######   ######  ######
//                      http://remood.org/
// -----------------------------------------------------------------------------
// Copyright (C) 1993-1996 by id Software, Inc.
// Copyright (C) 1998-2000 by DooM Legacy Team.
// Copyright (C) 2008-2011 GhostlyDeath (ghostlydeath@gmail.com)
// -----------------------------------------------------------------------------
// This program is free software; you can redistribute it and/or
// modify it under the terms of the GNU General Public License
// as published by the Free Software Foundation; either version 3
// of the License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// -----------------------------------------------------------------------------
// DESCRIPTION: DOOM strings, by language.

#ifndef __DSTRINGS__
#define __DSTRINGS__

#include "doomtype.h"

// All important printed strings.
// Language selection (message strings).
// Use -DFRENCH etc.

#ifdef FRENCH
#include "d_french.h"
#else
#include "d_englsh.h"
#endif

// Misc. other strings.
#define SAVEGAMENAME    "remoodsv"

extern char savegamename[256];

//
// File locations,
//  relative to current position.
// Path names are OS-sensitive.
//
#define DEVMAPS "devmaps"
#define DEVDATA "devdata"

// Not done in french?

// QuitDOOM messages
  //added:02-01-98: "22 messages - 7 fucking messages = 15 cool messages" !
#define NUM_QUITMESSAGES   15

extern char *endmsg[];

/******************************************************************************/
/******************************************************************************/
/******************************************************************************/

typedef enum
{
	MENU_NULLSPACE,
	MENU_MAIN_NEWGAME,
	MENU_MAIN_ENDGAME,
	MENU_MAIN_LOADGAME,
	MENU_MAIN_SAVEGAME,
	MENU_MAIN_OPTIONS,
	MENU_MAIN_PROFILES,
	MENU_MAIN_QUITGAME,
	MENU_OPTIONS_TITLE,
	MENU_OPTIONS_GAMESETTINGS,
	MENU_OPTIONS_CONTROLSETTINGS,
	MENU_OPTIONS_GRAPHICALSETTINGS,
	MENU_OPTIONS_AUDIOSETTINGS,
	MENU_OPTIONS_ADVANCEDSETTINGS,
	MENU_OPTIONS_DISABLETITLESCREENDEMOS,
	MENU_CONTROLS_TITLE,
	MENU_CONTROLS_CONTROLSUBTITLE,
	MENU_CONTROLS_ACTIONSPERKEY,
	MENU_CONTROLS_PLAYERONECONTROLS,
	MENU_CONTROLS_PLAYERTWOCONTROLS,
	MENU_CONTROLS_PLAYERTHREECONTROLS,
	MENU_CONTROLS_PLAYERFOURCONTROLS,
	MENU_CONTROLS_MOUSESUBTITLE,
	MENU_CONTROLS_ENABLEMOUSE,
	MENU_CONTROLS_ADVANCEDMOUSE,
	MENU_CONTROLS_BASICSETTINGSSUBSUBTITLE,
	MENU_CONTROLS_USEMOUSEFREELOOK,
	MENU_CONTROLS_USEMOUSEMOVE,
	MENU_CONTROLS_INVERTYAXIS,
	MENU_CONTROLS_MOVETURNSENS,
	MENU_CONTROLS_LOOKUPDOWNSENS,
	MENU_CONTROLS_ADVANCEDSETTINGSUBSUBTITLE,
	MENU_CONTROLS_XAXISSENS,
	MENU_CONTROLS_YAXISSENS,
	MENU_CONTROLS_XAXISMOVE,
	MENU_CONTROLS_YAXISMOVE,
	MENU_CONTROLS_XAXISMOVESECONDARY,
	MENU_CONTROLS_YAXISMOVESECONDARY,
	MENU_CONTROLS_STRAFEKEYUSESECONDARY,
	MENU_GRAPHICS_TITLE,
	MENU_GRAPHICS_SCREENSUBTITLE,
	MENU_GRAPHICS_SETRESOLUTION,
	MENU_GRAPHICS_FULLSCREEN,
	MENU_GRAPHICS_BRIGHTNESS,
	MENU_GRAPHICS_SCREENSIZE,
	MENU_GRAPHICS_SCREENLINK,
	MENU_GRAPHICS_RENDERERSUBTITLE,
	MENU_GRAPHICS_TRANSLUCENCY,
	MENU_GRAPHICS_ENABLEDECALS,
	MENU_GRAPHICS_MAXDECALS,
	MENU_GRAPHICS_CONSOLESUBTITLE,
	MENU_GRAPHICS_CONSOLESPEED,
	MENU_GRAPHICS_CONSOLEHEIGHT,
	MENU_GRAPHICS_CONSOLEBACKGROUND,
	MENU_GRAPHICS_MESSAGEDURATION,
	MENU_GRAPHICS_ECHOMESSAGES,
	MENU_GRAPHICS_MENUSUBTITLE,
	MENU_GRAPHICS_CURSORBLINKDURATION,
	MENU_GRAPHICS_HUDSUBTITLE,
	MENU_GRAPHICS_SCALESTATUSBAR,
	MENU_GRAPHICS_TRANSPARENTSTATUSBAR,
	MENU_GRAPHICS_STATUSBARTRANSPARENCYAMOUNT,
	MENU_GRAPHICS_CROSSHAIR,
	MENU_KEYBINDS_TITLE,
	MENU_KEYBINDS_MOVEMENTSUBTITLE,
	MENU_KEYBINDS_FIRE,
	MENU_KEYBINDS_ACTIVATE,
	MENU_KEYBINDS_MOVEFORWARDS,
	MENU_KEYBINDS_MOVEBACKWARDS,
	MENU_KEYBINDS_TURNLEFT,
	MENU_KEYBINDS_TURNRIGHT,
	MENU_KEYBINDS_RUN,
	MENU_KEYBINDS_STRAFEON,
	MENU_KEYBINDS_STRAFELEFT,
	MENU_KEYBINDS_STRAFERIGHT,
	MENU_KEYBINDS_LOOKUP,
	MENU_KEYBINDS_LOOKDOWN,
	MENU_KEYBINDS_CENTERVIEW,
	MENU_KEYBINDS_MOUSELOOK,
	MENU_KEYBINDS_JUMPFLYUP,
	MENU_KEYBINDS_FLYDOWN,
	MENU_KEYBINDS_WEAPONSANDITEMSSUBTITLE,
	MENU_KEYBINDS_SLOTONE,
	MENU_KEYBINDS_SLOTTWO,
	MENU_KEYBINDS_SLOTTHREE,
	MENU_KEYBINDS_SLOTFOUR,
	MENU_KEYBINDS_SLOTFIVE,
	MENU_KEYBINDS_SLOTSIX,
	MENU_KEYBINDS_SLOTSEVEN,
	MENU_KEYBINDS_SLOTEIGHT,
	MENU_KEYBINDS_PREVIOUSWEAPON,
	MENU_KEYBINDS_NEXTWEAPON,
	MENU_KEYBINDS_BESTWEAPON,
	MENU_KEYBINDS_INVENTORYLEFT,
	MENU_KEYBINDS_INVENTORYRIGHT,
	MENU_KEYBINDS_INVENTORYUSE,
	MENU_KEYBINDS_MISCSUBTITLE,
	MENU_KEYBINDS_TALKKEY,
	MENU_KEYBINDS_RANKINGSANDSCORES,
	MENU_KEYBINDS_TOGGLECONSOLE,
	MENU_AUDIO_TITLE,
	MENU_AUDIO_OUTPUTSUBTITLE,
	MENU_AUDIO_SOUNDOUTPUT,
	MENU_AUDIO_SOUNDDEVICE,
	MENU_AUDIO_MUSICOUTPUT,
	MENU_AUDIO_MUSICDEVICE,
	MENU_AUDIO_QUALITYSUBTITLE,
	MENU_AUDIO_SPEAKERSETUP,
	MENU_AUDIO_SAMPLESPERSECOND,
	MENU_AUDIO_BITSPERSAMPLE,
	MENU_AUDIO_FAKEPCSPEAKERWAVEFORM,
	MENU_AUDIO_VOLUMESUBTITLE,
	MENU_AUDIO_SOUNDVOLUME,
	MENU_AUDIO_MUSICVOLUME,
	MENU_AUDIO_MISCSUBTITLE,
	MENU_AUDIO_PRECACHESOUNDS,
	MENU_AUDIO_RANDOMSOUNDPITCH,
	MENU_AUDIO_SOUNDCHANNELS,
	MENU_AUDIO_RESERVEDSOUNDCHANNELS,
	MENU_AUDIO_MULTITHREADEDSOUND,
	MENU_AUDIO_MULTITHREADEDMUSIC,
	MENU_AUDIO_RESETSUBTITLE,
	MENU_AUDIO_RESETSOUND,
	MENU_AUDIO_RESETMUSIC,
	MENU_VIDEO_TITLE,
	MENU_VIDEO_MODESELECT,
	MENU_GAME_TITLE,
	MENU_GAME_MULTIPLAYERSUBTITLE,
	MENU_GAME_DEATHMATCHTYPE,
	MENU_GAME_FRAGLIMIT,
	MENU_GAME_TIMELIMIT,
	MENU_GAME_TEAMSUBTITLE,
	MENU_GAME_ENABLETEAMPLAY,
	MENU_GAME_FRIENDLYFIRE,
	MENU_GAME_RESTRICTIONSSUBTITLE,
	MENU_GAME_ALLOWJUMP,
	MENU_GAME_ALLOWROCKETJUMP,
	MENU_GAME_ALLOWAUTOAIM,
	MENU_GAME_ALLOWTURBO,
	MENU_GAME_ALLOWEXITLEVEL,
	MENU_GAME_FORCEAUTOAIM,
	MENU_GAME_WEAPONSANDITEMSSUBTITLE,
	MENU_GAME_ENABLEITEMRESPAWN,
	MENU_GAME_ITEMRESPAWNTIME,
	MENU_GAME_DROPWEAPONSWHENYOUDIE,
	MENU_GAME_INFINITEAMMO,
	MENU_GAME_MONSTERSSUBTITLE,
	MENU_GAME_SPAWNMONSTERS,
	MENU_GAME_ENABLEMONSTERRESPAWN,
	MENU_GAME_MONSTERRESPAWNTIME,
	MENU_GAME_FASTMONSTERS,
	MENU_GAME_PREDICTINGMONSTERS,
	MENU_GAME_MISCSUBTITLE,
	MENU_GAME_GRAVITY,
	MENU_GAME_SOLIDCORPSES,
	MENU_GAME_BLOODTIME,
	MENU_GAME_COMPATIBILITYSUBTITLE,
	MENU_GAME_CLASSICBLOOD,
	MENU_GAME_CLASSICROCKETEXPLOSIONS,
	MENU_GAME_CLASSICMONSTERMELEERANGE,
	MENU_GAME_CLASSICMONSTERLOGIC,
	MENU_NEWGAME_TITLE,
	MENU_NEWGAME_SINGLEPLAYERSUBTITLE,
	MENU_NEWGAME_CLASSIC,
	MENU_NEWGAME_CREATEGAME,
	MENU_NEWGAME_QUICKSTART,
	MENU_NEWGAME_MULTIPLAYERSUBTITLE,
	MENU_NEWGAME_SPLITSCREENGAME,
	MENU_NEWGAME_UDPLANINTERNETGAME,
	MENU_NEWGAME_TCPLANINTERNETGAME,
	MENU_NEWGAME_MODEMGAME,
	MENU_NEWGAME_SERIALNULLMODEMGAME,
	MENU_NEWGAME_FORKGAME,
	MENU_CLASSICGAME_TITLE,
	MENU_CLASSICGAME_DOOMSKILLA,
	MENU_CLASSICGAME_DOOMSKILLB,
	MENU_CLASSICGAME_DOOMSKILLC,
	MENU_CLASSICGAME_DOOMSKILLD,
	MENU_CLASSICGAME_DOOMSKILLE,
	MENU_CLASSICGAME_HERETICSKILLA,
	MENU_CLASSICGAME_HERETICSKILLB,
	MENU_CLASSICGAME_HERETICSKILLC,
	MENU_CLASSICGAME_HERETICSKILLD,
	MENU_CLASSICGAME_HERETICSKILLE,
	MENU_CLASSICGAME_DOOMEPISODEA,
	MENU_CLASSICGAME_DOOMEPISODEB,
	MENU_CLASSICGAME_DOOMEPISODEC,
	MENU_CLASSICGAME_DOOMEPISODED,
	MENU_CLASSICGAME_DOOMEPISODEE,
	MENU_CLASSICGAME_DOOMEPISODEF,
	MENU_CLASSICGAME_HERETICEPISODEA,
	MENU_CLASSICGAME_HERETICEPISODEB,
	MENU_CLASSICGAME_HERETICEPISODEC,
	MENU_CLASSICGAME_HERETICEPISODED,
	MENU_CLASSICGAME_HERETICEPISODEE,
	MENU_CLASSICGAME_HERETICEPISODEF,
	MENU_CREATEGAME_SOLOTITLE,
	MENU_CREATEGAME_LOCALTITLE,
	MENU_CREATEGAME_LEVEL,
	MENU_CREATEGAME_SKILL,
	MENU_CREATEGAME_SPAWNMONSTERS,
	MENU_CREATEGAME_OPTIONS,
	MENU_CREATEGAME_SETUPOPTIONS,
	MENU_CREATEGAME_STARTGAME,
	MENU_CREATEGAME_NUMBEROFPLAYERS,
	MENU_CREATEGAME_DEATHMATCHTYPE,
	MENU_CREATEGAME_FRAGLIMIT,
	MENU_CREATEGAME_TIMELIMIT,
	MENU_PROFILES_TITLE,
	MENU_PROFILES_CREATEPROFILE,
	MENU_PROFILES_CURRENTPROFILE,
	MENU_PROFILES_NAME,
	MENU_PROFILES_COLOR,
	MENU_PROFILES_SKIN,
	MENU_PROFILES_AUTOAIM,
	MENU_CREATEPROFILE_TITLE,
	MENU_CREATEPROFILE_PLEASENAME,
	MENU_CREATEPROFILE_NAME,
	MENU_CREATEPROFILE_ACCEPT,
	MENU_SELECTPROFILE_TITLE,
	MENU_SELECTPROFILE_PLEASESELECT,
	MENU_SELECTPROFILE_PLACEHOLDER,
	MENU_SELECTPROFILE_FORYOU,
	MENU_SELECTPROFILE_TWOSPLITA,
	MENU_SELECTPROFILE_TWOSPLITB,
	MENU_SELECTPROFILE_FOURSPLITA,
	MENU_SELECTPROFILE_FOURSPLITB,
	MENU_SELECTPROFILE_FOURSPLITC,
	MENU_SELECTPROFILE_FOURSPLITD,
	MENU_SELECTPROFILE_PROFILE,
	MENU_SELECTPROFILE_ACCEPT,
	MENU_OTHER_RANDOM,
	MENU_OTHER_RANDOMEPISODEA,
	MENU_OTHER_RANDOMEPISODEB,
	MENU_OTHER_RANDOMEPISODEC,
	MENU_OTHER_RANDOMEPISODED,
	MENU_OTHER_RANDOMEPISODEE,
	MENU_OTHER_RANDOMEPISODEF,
	MENU_OTHER_CHANGECONTROL,
	MENU_OTHER_PLAYERACONTROLS,
	MENU_OTHER_PLAYERBCONTROLS,
	MENU_OTHER_PLAYERCCONTROLS,
	MENU_OTHER_PLAYERDCONTROLS,
	MENU_OPTIONS_BINARYSAVES,
	
	NUMUNICODESTRINGS
} UnicodeStringID_t;

typedef struct StringGroupEX_s
{
	CONST char* CONST id;
	char* wcharstr;
} StringGroupEX_t;

StringGroupEX_t UnicodeStrings[NUMUNICODESTRINGS];

#define PTROFUNICODESTRING(n) (&(UnicodeStrings[n].wcharstr))
#define PTRTOUNICODESTRING(n) (UnicodeStrings[n].wcharstr)

/******************************************************************************/
/******************************************************************************/
/******************************************************************************/

#define UT_REMOODSTRIP 0x4000	// Strip UTF-32 Super high characters to 0xFFFD
								// Even if converted to UTF-32

typedef enum
{
	UT_AUTO,
	UT_WCHART,
	UT_ASCII,
	UT_UTF8,
	UT_UTF16,
	UT_UTF16LE,
	UT_UTF16BE,
	UT_UTF32,
	UT_UTF32LE,
	UT_UTF32BE,
	
	NUMUTFTYPE,
	
	UT_UTF16BS,		// INTERNAL USE ONLY, DO NOT USE
	UT_UTF32BS		// INTERNAL USE ONLY, DO NOT USE
} UTFType_t; 

/*** UNICODE ***/
boolean UNICODE_ConvertFile(UTFType_t InType, uint8_t* InData, size_t InSize,
	UTFType_t OutType, uint8_t** OutData, size_t* OutSize);
boolean UNICODE_Localize(uint8_t* InData, size_t InSize, wchar_t** OutData, size_t* OutSize);	/* Deprecated */

/* For Internal Usage to convert to/from unicode */
size_t UNICODE_ASCIILengthForUnicode(uint8_t* InData, size_t InSize);
boolean UNICODE_ASCIIToUnicode(char* InData, size_t InSize, wchar_t** OutData, size_t* OutSize);
boolean UNICODE_UnicodeToASCII(wchar_t* InData, size_t InSie, char** OutData, size_t* OutSize);

#if defined(EMULATEWCHARFUNCTIONS)
size_t UNICODE_StringLength(wchar_t* String);
int UNICODE_Compare(wchar_t* A, wchar_t* B);
int UNICODE_CompareN(wchar_t* A, wchar_t* B, size_t N);
int UNICODE_CaselessCompare(wchar_t* A, wchar_t* B);
int UNICODE_CaselessCompareN(wchar_t* A, wchar_t* B, size_t N);
wchar_t* UNICODE_Copy(wchar_t* D, wchar_t* S);
#else
#define UNICODE_StringLength(a) wcslen(a)
#define UNICODE_Compare(a,b) wcscmp(a,b)
#define UNICODE_CompareN(a,b,c) wcsncmp(a,b,c)
#define UNICODE_CaselessCompare(a,b) wcscasecmp(a,b)
#define UNICODE_CaselessCompareN(a,b,c) wcsncasecmp(a,b,c)
#define UNICODE_Copy(d,s) wcscpy(d,s)
#define UNICODE_CopyN(d,s,n) wcsncpy(d,s,n)
#endif

#endif

